
F103_CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ac  080047ac  000060f0  2**0
                  CONTENTS
  4 .ARM          00000008  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b4  080047b4  000060f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080047bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200000f0  080048ac  000060f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080048ac  00006424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097b7  00000000  00000000  00006119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002465  00000000  00000000  0000f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00011d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f3  00000000  00000000  00012680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a05  00000000  00000000  00012d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd37  00000000  00000000  0002b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084681  00000000  00000000  000384af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcb30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f3c  00000000  00000000  000bcb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bfab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f94 	.word	0x08003f94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08003f94 	.word	0x08003f94

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cliManager_init>:
 *
 * @return
 * Execution code (shellStatus_e)
 */
int8_t cliManager_init()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	s_register(cli_module);
 8000160:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <cliManager_init+0x14>)
 8000162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000164:	f000 fbae 	bl	80008c4 <s_register>
	return success;
 8000168:	2300      	movs	r3, #0
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20000010 	.word	0x20000010

08000174 <w_getCliVersion>:
 *
 * @return
 * Execution code (shellStatus_e)
 */
static int8_t w_getCliVersion(int32_t argc, char *argv[])
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b09c      	sub	sp, #112	@ 0x70
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
	char msg[100];

	if(argc != 0)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d002      	beq.n	800018a <w_getCliVersion+0x16>
		return e_argNumber;
 8000184:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 8000188:	e00f      	b.n	80001aa <w_getCliVersion+0x36>

	sprintf(msg, "Version %d.%d", ver.major, ver.minor);
 800018a:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <w_getCliVersion+0x40>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	461a      	mov	r2, r3
 8000190:	4b08      	ldr	r3, [pc, #32]	@ (80001b4 <w_getCliVersion+0x40>)
 8000192:	785b      	ldrb	r3, [r3, #1]
 8000194:	f107 000c 	add.w	r0, r7, #12
 8000198:	4907      	ldr	r1, [pc, #28]	@ (80001b8 <w_getCliVersion+0x44>)
 800019a:	f002 fda9 	bl	8002cf0 <siprintf>
	return printBuffer(msg);
 800019e:	f107 030c 	add.w	r3, r7, #12
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 f99c 	bl	80014e0 <printBuffer>
 80001a8:	4603      	mov	r3, r0
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3770      	adds	r7, #112	@ 0x70
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000000 	.word	0x20000000
 80001b8:	08004018 	.word	0x08004018

080001bc <w_ledSwitch>:
 *
 * @return
 * Execution code (shellStatus_e).
 */
static int8_t w_ledSwitch(int32_t argc, char *argv[])
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	6039      	str	r1, [r7, #0]
	ledNum_e L = unknownState;
 80001c6:	23ff      	movs	r3, #255	@ 0xff
 80001c8:	73fb      	strb	r3, [r7, #15]
	ledState_e S = unknownLed;
 80001ca:	23ff      	movs	r3, #255	@ 0xff
 80001cc:	73bb      	strb	r3, [r7, #14]

	if(argc != 2)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d002      	beq.n	80001da <w_ledSwitch+0x1e>
		return e_argNumber;
 80001d4:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 80001d8:	e027      	b.n	800022a <w_ledSwitch+0x6e>

	L = atoi(argv[0]);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fc3c 	bl	8002a5c <atoi>
 80001e4:	4603      	mov	r3, r0
 80001e6:	73fb      	strb	r3, [r7, #15]
	if(L < 1 || L > 4)
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <w_ledSwitch+0x38>
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	2b04      	cmp	r3, #4
 80001f2:	d902      	bls.n	80001fa <w_ledSwitch+0x3e>
		return e_argValue;
 80001f4:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80001f8:	e017      	b.n	800022a <w_ledSwitch+0x6e>

	S = atoi(argv[1]);
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	3304      	adds	r3, #4
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f002 fc2b 	bl	8002a5c <atoi>
 8000206:	4603      	mov	r3, r0
 8000208:	73bb      	strb	r3, [r7, #14]
	if(S != 0 && S!=1)
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d005      	beq.n	800021c <w_ledSwitch+0x60>
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d002      	beq.n	800021c <w_ledSwitch+0x60>
		return e_argValue;
 8000216:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800021a:	e006      	b.n	800022a <w_ledSwitch+0x6e>

	ledSwitch(L, S);
 800021c:	7bba      	ldrb	r2, [r7, #14]
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4611      	mov	r1, r2
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f812 	bl	800024c <ledSwitch>
    return 0;
 8000228:	2300      	movs	r3, #0
}
 800022a:	4618      	mov	r0, r3
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <led_init>:
 *
 * @return
 * Execution code (shellStatus_e)
 */
int8_t led_init()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	s_register(led_module);
 8000238:	4b03      	ldr	r3, [pc, #12]	@ (8000248 <led_init+0x14>)
 800023a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800023c:	f000 fb42 	bl	80008c4 <s_register>
	return success;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c

0800024c <ledSwitch>:
 *
 * @return
 * In every case 1
 */
int32_t ledSwitch(ledNum_e num, ledState_e state)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	460a      	mov	r2, r1
 8000256:	71fb      	strb	r3, [r7, #7]
 8000258:	4613      	mov	r3, r2
 800025a:	71bb      	strb	r3, [r7, #6]
	switch(num)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	3b01      	subs	r3, #1
 8000260:	2b03      	cmp	r3, #3
 8000262:	d863      	bhi.n	800032c <ledSwitch+0xe0>
 8000264:	a201      	add	r2, pc, #4	@ (adr r2, 800026c <ledSwitch+0x20>)
 8000266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026a:	bf00      	nop
 800026c:	0800027d 	.word	0x0800027d
 8000270:	080002a9 	.word	0x080002a9
 8000274:	080002d5 	.word	0x080002d5
 8000278:	08000301 	.word	0x08000301
	{
		case led1:
		{
			if(off == state)
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d106      	bne.n	8000290 <ledSwitch+0x44>
				GPIOB->ODR &= ~(1<<1);
 8000282:	4b2e      	ldr	r3, [pc, #184]	@ (800033c <ledSwitch+0xf0>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a2d      	ldr	r2, [pc, #180]	@ (800033c <ledSwitch+0xf0>)
 8000288:	f023 0302 	bic.w	r3, r3, #2
 800028c:	60d3      	str	r3, [r2, #12]
			else if(on == state)
				GPIOB->ODR |= (1<<1);
			else
				return 1;

			break;
 800028e:	e04f      	b.n	8000330 <ledSwitch+0xe4>
			else if(on == state)
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d106      	bne.n	80002a4 <ledSwitch+0x58>
				GPIOB->ODR |= (1<<1);
 8000296:	4b29      	ldr	r3, [pc, #164]	@ (800033c <ledSwitch+0xf0>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a28      	ldr	r2, [pc, #160]	@ (800033c <ledSwitch+0xf0>)
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	60d3      	str	r3, [r2, #12]
			break;
 80002a2:	e045      	b.n	8000330 <ledSwitch+0xe4>
				return 1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	e044      	b.n	8000332 <ledSwitch+0xe6>
		}

		case led2:
		{
			if(off == state)
 80002a8:	79bb      	ldrb	r3, [r7, #6]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d106      	bne.n	80002bc <ledSwitch+0x70>
				GPIOB->ODR &= ~(1<<3);
 80002ae:	4b23      	ldr	r3, [pc, #140]	@ (800033c <ledSwitch+0xf0>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	4a22      	ldr	r2, [pc, #136]	@ (800033c <ledSwitch+0xf0>)
 80002b4:	f023 0308 	bic.w	r3, r3, #8
 80002b8:	60d3      	str	r3, [r2, #12]
			else if(on == state)
				GPIOB->ODR |= (1<<3);
			else
				return 1;

			break;
 80002ba:	e039      	b.n	8000330 <ledSwitch+0xe4>
			else if(on == state)
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d106      	bne.n	80002d0 <ledSwitch+0x84>
				GPIOB->ODR |= (1<<3);
 80002c2:	4b1e      	ldr	r3, [pc, #120]	@ (800033c <ledSwitch+0xf0>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a1d      	ldr	r2, [pc, #116]	@ (800033c <ledSwitch+0xf0>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	60d3      	str	r3, [r2, #12]
			break;
 80002ce:	e02f      	b.n	8000330 <ledSwitch+0xe4>
				return 1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e02e      	b.n	8000332 <ledSwitch+0xe6>
		}

		case led3:
		{
			if(off == state)
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d106      	bne.n	80002e8 <ledSwitch+0x9c>
				GPIOA->ODR &= ~(1<<9);
 80002da:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <ledSwitch+0xf4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4a18      	ldr	r2, [pc, #96]	@ (8000340 <ledSwitch+0xf4>)
 80002e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002e4:	60d3      	str	r3, [r2, #12]
			else if(on == state)
				GPIOA->ODR |= (1<<9);
			else
				return 1;

			break;
 80002e6:	e023      	b.n	8000330 <ledSwitch+0xe4>
			else if(on == state)
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d106      	bne.n	80002fc <ledSwitch+0xb0>
				GPIOA->ODR |= (1<<9);
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <ledSwitch+0xf4>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <ledSwitch+0xf4>)
 80002f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002f8:	60d3      	str	r3, [r2, #12]
			break;
 80002fa:	e019      	b.n	8000330 <ledSwitch+0xe4>
				return 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	e018      	b.n	8000332 <ledSwitch+0xe6>
		}

		case led4:
		{
			if(off == state)
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d106      	bne.n	8000314 <ledSwitch+0xc8>
				GPIOA->ODR &= ~(1<<10);
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <ledSwitch+0xf4>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <ledSwitch+0xf4>)
 800030c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000310:	60d3      	str	r3, [r2, #12]
			else if(on == state)
				GPIOA->ODR |= (1<<10);
			else
				return 1;

			break;
 8000312:	e00d      	b.n	8000330 <ledSwitch+0xe4>
			else if(on == state)
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d106      	bne.n	8000328 <ledSwitch+0xdc>
				GPIOA->ODR |= (1<<10);
 800031a:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <ledSwitch+0xf4>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a08      	ldr	r2, [pc, #32]	@ (8000340 <ledSwitch+0xf4>)
 8000320:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000324:	60d3      	str	r3, [r2, #12]
			break;
 8000326:	e003      	b.n	8000330 <ledSwitch+0xe4>
				return 1;
 8000328:	2301      	movs	r3, #1
 800032a:	e002      	b.n	8000332 <ledSwitch+0xe6>
		}

		default:
		{
			return 1;
 800032c:	2301      	movs	r3, #1
 800032e:	e000      	b.n	8000332 <ledSwitch+0xe6>
			break;
		}
	}		/* End switch */

	return 1;
 8000330:	2301      	movs	r3, #1
}
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40010c00 	.word	0x40010c00
 8000340:	40010800 	.word	0x40010800

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f001 fa40 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f820 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f000 f884 	bl	800045c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000354:	f000 f858 	bl	8000408 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2->CR1 |= 1U<<13U; 	//USART enable
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <main+0x48>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a0b      	ldr	r2, [pc, #44]	@ (800038c <main+0x48>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000362:	60d3      	str	r3, [r2, #12]
  USART2->CR3 |= 3U<<6U;	//DMA RX and TX enabled
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <main+0x48>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <main+0x48>)
 800036a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800036e:	6153      	str	r3, [r2, #20]

  led_init();
 8000370:	f7ff ff60 	bl	8000234 <led_init>
  mcu_init();
 8000374:	f000 f9f4 	bl	8000760 <mcu_init>
  cliManager_init();
 8000378:	f7ff fef0 	bl	800015c <cliManager_init>

  dma_init();
 800037c:	f000 fffc 	bl	8001378 <dma_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __NOP();
 8000380:	bf00      	nop
	  __NOP();
 8000382:	bf00      	nop
	  __NOP();
 8000384:	bf00      	nop
	  __NOP();
 8000386:	bf00      	nop
 8000388:	e7fa      	b.n	8000380 <main+0x3c>
 800038a:	bf00      	nop
 800038c:	40004400 	.word	0x40004400

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	@ 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fd09 	bl	8002db6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ba:	2310      	movs	r3, #16
 80003bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003be:	2300      	movs	r3, #0
 80003c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	f107 0318 	add.w	r3, r7, #24
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fe5a 	bl	8002080 <HAL_RCC_OscConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003d2:	f000 f8df 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d6:	230f      	movs	r3, #15
 80003d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 f8c8 	bl	8002584 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f8cb 	bl	8000594 <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3740      	adds	r7, #64	@ 0x40
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	@ (8000458 <MX_USART2_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 8000414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_USART2_UART_Init+0x4c>)
 8000440:	f002 fa2e 	bl	80028a0 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800044a:	f000 f8a3 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000010c 	.word	0x2000010c
 8000458:	40004400 	.word	0x40004400

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a43      	ldr	r2, [pc, #268]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b41      	ldr	r3, [pc, #260]	@ (8000584 <MX_GPIO_Init+0x128>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b3e      	ldr	r3, [pc, #248]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a3d      	ldr	r2, [pc, #244]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b3b      	ldr	r3, [pc, #236]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a37      	ldr	r2, [pc, #220]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a31      	ldr	r2, [pc, #196]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d6:	482c      	ldr	r0, [pc, #176]	@ (8000588 <MX_GPIO_Init+0x12c>)
 80004d8:	f001 fdba 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	210a      	movs	r1, #10
 80004e0:	482a      	ldr	r0, [pc, #168]	@ (800058c <MX_GPIO_Init+0x130>)
 80004e2:	f001 fdb5 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80004ec:	4828      	ldr	r0, [pc, #160]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004ee:	f001 fdaf 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2302      	movs	r3, #2
 8000502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	481f      	ldr	r0, [pc, #124]	@ (8000588 <MX_GPIO_Init+0x12c>)
 800050c:	f001 fc1c 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000510:	2320      	movs	r3, #32
 8000512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	481b      	ldr	r0, [pc, #108]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000524:	f001 fc10 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000528:	230a      	movs	r3, #10
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2302      	movs	r3, #2
 8000536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4813      	ldr	r0, [pc, #76]	@ (800058c <MX_GPIO_Init+0x130>)
 8000540:	f001 fc02 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000544:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <MX_GPIO_Init+0x134>)
 800055e:	f001 fbf3 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000562:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_GPIO_Init+0x130>)
 8000578:	f001 fbe6 	bl	8001d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057c:	bf00      	nop
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40010800 	.word	0x40010800

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <w_reset>:
 * @return
 * Execution code (shellStatus_e).
 *
 */
static int8_t w_reset(int32_t argc, char *argv[])
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	if(argc != 0)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <w_reset+0x16>
		return e_argNumber;
 80005b0:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 80005b4:	e002      	b.n	80005bc <w_reset+0x1c>

	mcu_reset();
 80005b6:	f000 f88d 	bl	80006d4 <mcu_reset>
	return success;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <w_flashRead>:
 * @return
 * Execution code (shellStatus_e).
 *
 */
static int8_t w_flashRead(int32_t argc, char *argv[])
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b09e      	sub	sp, #120	@ 0x78
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	//TODO: refactor cascade if..else
	char outMsg[100];

	if(argc != 1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d002      	beq.n	80005da <w_flashRead+0x16>
		return e_argNumber;
 80005d4:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 80005d8:	e020      	b.n	800061c <w_flashRead+0x58>


	uint32_t flashAddress = 0, result = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80005de:	2300      	movs	r3, #0
 80005e0:	673b      	str	r3, [r7, #112]	@ 0x70

	if((flashAddress = hex2dec(argv[0])) != 0)	//TODO: comparison with zero is wrong. probably...
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f8c4 	bl	8000774 <hex2dec>
 80005ec:	6778      	str	r0, [r7, #116]	@ 0x74
 80005ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d011      	beq.n	8000618 <w_flashRead+0x54>
	{
		result = mcu_memRead(flashAddress);
 80005f4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80005f6:	f000 f87b 	bl	80006f0 <mcu_memRead>
 80005fa:	6738      	str	r0, [r7, #112]	@ 0x70
		sprintf(outMsg, "Address: %x | Data: %x", (unsigned int)flashAddress, (unsigned int)result);
 80005fc:	f107 000c 	add.w	r0, r7, #12
 8000600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000602:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000604:	4907      	ldr	r1, [pc, #28]	@ (8000624 <w_flashRead+0x60>)
 8000606:	f002 fb73 	bl	8002cf0 <siprintf>
		printBuffer(outMsg);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4618      	mov	r0, r3
 8000610:	f000 ff66 	bl	80014e0 <printBuffer>
		return success;
 8000614:	2300      	movs	r3, #0
 8000616:	e001      	b.n	800061c <w_flashRead+0x58>
	}
	else
		return e_argValue;
 8000618:	f06f 0329 	mvn.w	r3, #41	@ 0x29
}
 800061c:	4618      	mov	r0, r3
 800061e:	3778      	adds	r7, #120	@ 0x78
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	08004334 	.word	0x08004334

08000628 <w_flashWrite>:
 * @return
 * Execution code (shellStatus_e).
 *
 */
static int8_t w_flashWrite(int32_t argc, char *argv[])
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09e      	sub	sp, #120	@ 0x78
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]

	//TODO: refactor cascade if..else
	char outMsg[100];

	if(argc != 2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d002      	beq.n	800063e <w_flashWrite+0x16>
		return e_argNumber;
 8000638:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 800063c:	e042      	b.n	80006c4 <w_flashWrite+0x9c>

	uint32_t flashAddress = 0, flashData = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	677b      	str	r3, [r7, #116]	@ 0x74
 8000642:	2300      	movs	r3, #0
 8000644:	673b      	str	r3, [r7, #112]	@ 0x70

	if((flashAddress = hex2dec(argv[0])) != 0)	//TODO: comparison with zero is wrong. probably...
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f892 	bl	8000774 <hex2dec>
 8000650:	6778      	str	r0, [r7, #116]	@ 0x74
 8000652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000654:	2b00      	cmp	r3, #0
 8000656:	d030      	beq.n	80006ba <w_flashWrite+0x92>
	{
		if((flashData = hex2dec(argv[1])) != 0)	//TODO: comparison with zero is wrong. probably...
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	3304      	adds	r3, #4
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f888 	bl	8000774 <hex2dec>
 8000664:	6738      	str	r0, [r7, #112]	@ 0x70
 8000666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000668:	2b00      	cmp	r3, #0
 800066a:	d029      	beq.n	80006c0 <w_flashWrite+0x98>
		{
			mcu_memWrite(flashAddress, flashData);
 800066c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800066e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000670:	f000 f84a 	bl	8000708 <mcu_memWrite>

			if(mcu_memRead(flashAddress) == flashData)
 8000674:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000676:	f000 f83b 	bl	80006f0 <mcu_memRead>
 800067a:	4602      	mov	r2, r0
 800067c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800067e:	4293      	cmp	r3, r2
 8000680:	d10d      	bne.n	800069e <w_flashWrite+0x76>
			{
				sprintf(outMsg, "Address: %x | Data: %x\r\n", (unsigned int)flashAddress, (unsigned int)flashData);
 8000682:	f107 000c 	add.w	r0, r7, #12
 8000686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000688:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800068a:	4910      	ldr	r1, [pc, #64]	@ (80006cc <w_flashWrite+0xa4>)
 800068c:	f002 fb30 	bl	8002cf0 <siprintf>
				printBuffer(outMsg);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff23 	bl	80014e0 <printBuffer>
				return success;
 800069a:	2300      	movs	r3, #0
 800069c:	e012      	b.n	80006c4 <w_flashWrite+0x9c>
			}
			else
			{
				sprintf(outMsg, "Wrong data was stored\r\n");
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	490b      	ldr	r1, [pc, #44]	@ (80006d0 <w_flashWrite+0xa8>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fb23 	bl	8002cf0 <siprintf>
				printBuffer(outMsg);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff16 	bl	80014e0 <printBuffer>
				return e_funcExecution;
 80006b4:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 80006b8:	e004      	b.n	80006c4 <w_flashWrite+0x9c>
			}
		}
	}
	else
		return e_argValue;
 80006ba:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80006be:	e001      	b.n	80006c4 <w_flashWrite+0x9c>

	return unknownError;
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3778      	adds	r7, #120	@ 0x78
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	0800434c 	.word	0x0800434c
 80006d0:	08004368 	.word	0x08004368

080006d4 <mcu_reset>:
 * @brief
 * Perform program reset of MCU
 *
 */
void mcu_reset()
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	SCB->AIRCR = 0x05FA0004;
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <mcu_reset+0x14>)
 80006da:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <mcu_reset+0x18>)
 80006dc:	60da      	str	r2, [r3, #12]
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	05fa0004 	.word	0x05fa0004

080006f0 <mcu_memRead>:
 *
 * @return
 * Data stored in certain address
 */
uint32_t mcu_memRead(uint32_t address)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	return (*(__IO uint32_t*) address);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <mcu_memWrite>:
 *
 * @param[in] uint32_t data
 * Data to be stored in memory
 */
void mcu_memWrite(uint32_t address, uint32_t data)
{
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000712:	f001 fa11 	bl	8001b38 <HAL_FLASH_Unlock>
	CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <mcu_memWrite+0x54>)
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	4a10      	ldr	r2, [pc, #64]	@ (800075c <mcu_memWrite+0x54>)
 800071c:	f023 0302 	bic.w	r3, r3, #2
 8000720:	6113      	str	r3, [r2, #16]
	SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <mcu_memWrite+0x54>)
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <mcu_memWrite+0x54>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	461c      	mov	r4, r3
 8000734:	4615      	mov	r5, r2
 8000736:	4622      	mov	r2, r4
 8000738:	462b      	mov	r3, r5
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2002      	movs	r0, #2
 800073e:	f001 f98b 	bl	8001a58 <HAL_FLASH_Program>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <mcu_memWrite+0x54>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <mcu_memWrite+0x54>)
 8000748:	f023 0301 	bic.w	r3, r3, #1
 800074c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800074e:	f001 fa19 	bl	8001b84 <HAL_FLASH_Lock>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bdb0      	pop	{r4, r5, r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <mcu_init>:
/**
 * @brief
 * Module registration for shell
 */
void mcu_init()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	//TODO; return code
	s_register(mcu_module);
 8000764:	4b02      	ldr	r3, [pc, #8]	@ (8000770 <mcu_init+0x10>)
 8000766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000768:	f000 f8ac 	bl	80008c4 <s_register>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000060 	.word	0x20000060

08000774 <hex2dec>:
 *
 * @return
 * Transformed decimal number
 */
static uint32_t hex2dec(const char *hex)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	//TODO: Add error codes instead of magic numbers
	//TODO: ноль тоже значение, его возврат это ошибка, возмонжо стоит убратб возврат нуля
	uint32_t decimal = 0, base = 1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
	uint8_t length = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	72fb      	strb	r3, [r7, #11]

    if(hex[0] != '0' || hex[1] != 'x')
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b30      	cmp	r3, #48	@ 0x30
 800078e:	d104      	bne.n	800079a <hex2dec+0x26>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3301      	adds	r3, #1
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b78      	cmp	r3, #120	@ 0x78
 8000798:	d001      	beq.n	800079e <hex2dec+0x2a>
    {
        return 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e06d      	b.n	800087a <hex2dec+0x106>
    }
    hex+=2; //delete prefix
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3302      	adds	r3, #2
 80007a2:	607b      	str	r3, [r7, #4]

    length = strlen(hex);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fcd1 	bl	800014c <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	72fb      	strb	r3, [r7, #11]

    for(int i = --length; i >= 0; i--)
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	72fb      	strb	r3, [r7, #11]
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e05b      	b.n	8000872 <hex2dec+0xfe>
    {
        if(hex[i] >= '0' && hex[i] <= '9')
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007c4:	d915      	bls.n	80007f2 <hex2dec+0x7e>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b39      	cmp	r3, #57	@ 0x39
 80007d0:	d80f      	bhi.n	80007f2 <hex2dec+0x7e>
        {
            decimal += (hex[i] - 48) * base;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3b30      	subs	r3, #48	@ 0x30
 80007dc:	461a      	mov	r2, r3
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	4413      	add	r3, r2
 80007e8:	617b      	str	r3, [r7, #20]
            base *= 16;
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	e03c      	b.n	800086c <hex2dec+0xf8>
        }
        else if(hex[i] >= 'A' && hex[i] <= 'F')
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b40      	cmp	r3, #64	@ 0x40
 80007fc:	d915      	bls.n	800082a <hex2dec+0xb6>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b46      	cmp	r3, #70	@ 0x46
 8000808:	d80f      	bhi.n	800082a <hex2dec+0xb6>
        {
            decimal += (hex[i] - 55) * base;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3b37      	subs	r3, #55	@ 0x37
 8000814:	461a      	mov	r2, r3
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	617b      	str	r3, [r7, #20]
            base *= 16;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e020      	b.n	800086c <hex2dec+0xf8>
        }
        else if(hex[i] >= 'a' && hex[i] <= 'f')
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b60      	cmp	r3, #96	@ 0x60
 8000834:	d915      	bls.n	8000862 <hex2dec+0xee>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b66      	cmp	r3, #102	@ 0x66
 8000840:	d80f      	bhi.n	8000862 <hex2dec+0xee>
        {
            decimal += (hex[i] - 87) * base;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4413      	add	r3, r2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	3b57      	subs	r3, #87	@ 0x57
 800084c:	461a      	mov	r2, r3
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	fb02 f303 	mul.w	r3, r2, r3
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	4413      	add	r3, r2
 8000858:	617b      	str	r3, [r7, #20]
            base *= 16;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	e004      	b.n	800086c <hex2dec+0xf8>
        }
        else
        {
        	//TODO shall be removed probably
        	printBuffer("Wrong argument type.\r\n");
 8000862:	4808      	ldr	r0, [pc, #32]	@ (8000884 <hex2dec+0x110>)
 8000864:	f000 fe3c 	bl	80014e0 <printBuffer>
        	return 0;
 8000868:	2300      	movs	r3, #0
 800086a:	e006      	b.n	800087a <hex2dec+0x106>
    for(int i = --length; i >= 0; i--)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3b01      	subs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	daa0      	bge.n	80007ba <hex2dec+0x46>
        }

    }
    return decimal;
 8000878:	697b      	ldr	r3, [r7, #20]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08004380 	.word	0x08004380

08000888 <countArgc>:
 * 	@return
 * 	Number of arguments for function
 *
 */
static uint8_t countArgc(char *token[])
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	int8_t argc = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

	while(token[argc])
 8000894:	e005      	b.n	80008a2 <countArgc+0x1a>
	    argc++;
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	3301      	adds	r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	73fb      	strb	r3, [r7, #15]
	while(token[argc])
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f1      	bne.n	8000896 <countArgc+0xe>

	return argc-2; //Due to the two first tokens are module and function names
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3b02      	subs	r3, #2
 80008b6:	b2db      	uxtb	r3, r3
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <s_register>:
 *
 * 	@return
 * 	Function execution result
 */
shellStatus_e s_register(module_t in_module)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	463c      	mov	r4, r7
 80008cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(in_module.name == NULL)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <s_register+0x18>
        return r_badArguments;
 80008d6:	f06f 030a 	mvn.w	r3, #10
 80008da:	e02c      	b.n	8000936 <s_register+0x72>

    for(int i=0; i<MAX_MODULES; i++)	//Goes through modules database
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e024      	b.n	800092c <s_register+0x68>
    {
        if(module[i].name == NULL)		//Available place for module storing was found
 80008e2:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <s_register+0x7c>)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10a      	bne.n	8000906 <s_register+0x42>
        {
            memcpy(&module[i], &in_module, sizeof(module_t));
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <s_register+0x7c>)
 80008f6:	4413      	add	r3, r2
 80008f8:	4639      	mov	r1, r7
 80008fa:	2210      	movs	r2, #16
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fb6a 	bl	8002fd6 <memcpy>
            return success;
 8000902:	2300      	movs	r3, #0
 8000904:	e017      	b.n	8000936 <s_register+0x72>
        }

        if(!strcasecmp(module[i].name, in_module.name)) //If the module has already written
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <s_register+0x7c>)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	4413      	add	r3, r2
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fa57 	bl	8002dc8 <strcasecmp>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <s_register+0x62>
            return r_alreadyCreated;
 8000920:	f06f 030c 	mvn.w	r3, #12
 8000924:	e007      	b.n	8000936 <s_register+0x72>
    for(int i=0; i<MAX_MODULES; i++)	//Goes through modules database
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	2b09      	cmp	r3, #9
 8000930:	ddd7      	ble.n	80008e2 <s_register+0x1e>
    }
    return r_overflow;	//Database if full
 8000932:	f06f 030b 	mvn.w	r3, #11
}
 8000936:	4618      	mov	r0, r3
 8000938:	371c      	adds	r7, #28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	bf00      	nop
 8000940:	20000154 	.word	0x20000154

08000944 <s_parse>:
 *
 * 	@return
 *  Function execution result
 */
shellStatus_e s_parse(char *in_buffer)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
       char *lexeme = NULL;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
       uint8_t cnt = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	72fb      	strb	r3, [r7, #11]

       lexeme = strtok(in_buffer, " ");   //First lexeme (module name)
 8000954:	4918      	ldr	r1, [pc, #96]	@ (80009b8 <s_parse+0x74>)
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f002 fa50 	bl	8002dfc <strtok>
 800095c:	60f8      	str	r0, [r7, #12]
       token[cnt] = lexeme;
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	4916      	ldr	r1, [pc, #88]	@ (80009bc <s_parse+0x78>)
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
       cnt++;
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	3301      	adds	r3, #1
 800096c:	72fb      	strb	r3, [r7, #11]

       while (lexeme != NULL)
 800096e:	e012      	b.n	8000996 <s_parse+0x52>
       {
          lexeme = strtok (NULL, " ");
 8000970:	4911      	ldr	r1, [pc, #68]	@ (80009b8 <s_parse+0x74>)
 8000972:	2000      	movs	r0, #0
 8000974:	f002 fa42 	bl	8002dfc <strtok>
 8000978:	60f8      	str	r0, [r7, #12]
          token[cnt] = lexeme;
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	490f      	ldr	r1, [pc, #60]	@ (80009bc <s_parse+0x78>)
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          cnt++;
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	3301      	adds	r3, #1
 8000988:	72fb      	strb	r3, [r7, #11]

          if(cnt >= MAX_TOKENS)
 800098a:	7afb      	ldrb	r3, [r7, #11]
 800098c:	2b0b      	cmp	r3, #11
 800098e:	d902      	bls.n	8000996 <s_parse+0x52>
              return p_argOverflow; // Arguments overflow
 8000990:	f06f 0318 	mvn.w	r3, #24
 8000994:	e00b      	b.n	80009ae <s_parse+0x6a>
       while (lexeme != NULL)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1e9      	bne.n	8000970 <s_parse+0x2c>
       }
       token[--cnt] = 0;    //Delete null argument (last position)
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	3b01      	subs	r3, #1
 80009a0:	72fb      	strb	r3, [r7, #11]
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <s_parse+0x78>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

       return success;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	080044a4 	.word	0x080044a4
 80009bc:	200001f4 	.word	0x200001f4

080009c0 <s_find>:
 * 	Array of separated tokens. One token is one string.
 *
 * 	@todo description
 */
shellStatus_e s_find(char *token[])
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	//Common help
	if(strcasecmp("help", token[0]) == 0 || strcasecmp("?", token[0]) == 0 )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	4886      	ldr	r0, [pc, #536]	@ (8000be8 <s_find+0x228>)
 80009d0:	f002 f9fa 	bl	8002dc8 <strcasecmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d008      	beq.n	80009ec <s_find+0x2c>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	4882      	ldr	r0, [pc, #520]	@ (8000bec <s_find+0x22c>)
 80009e2:	f002 f9f1 	bl	8002dc8 <strcasecmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d123      	bne.n	8000a34 <s_find+0x74>
	{
		//TODO: собрать все это в одно сообщение
		printBuffer(commonHelp);
 80009ec:	4b80      	ldr	r3, [pc, #512]	@ (8000bf0 <s_find+0x230>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fd75 	bl	80014e0 <printBuffer>

		for(int i=0; i<MAX_MODULES; i++) //Goes through modules database
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e014      	b.n	8000a26 <s_find+0x66>
		{
			if(module[i].name == 0)	//If modules are over
 80009fc:	4a7d      	ldr	r2, [pc, #500]	@ (8000bf4 <s_find+0x234>)
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	4413      	add	r3, r2
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d011      	beq.n	8000a2e <s_find+0x6e>
				break;				//exit from the cycle

			printBuffer(module[i].name); // Output all available modules
 8000a0a:	4a7a      	ldr	r2, [pc, #488]	@ (8000bf4 <s_find+0x234>)
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	4413      	add	r3, r2
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fd63 	bl	80014e0 <printBuffer>
			printBuffer("\r\n");
 8000a1a:	4877      	ldr	r0, [pc, #476]	@ (8000bf8 <s_find+0x238>)
 8000a1c:	f000 fd60 	bl	80014e0 <printBuffer>
		for(int i=0; i<MAX_MODULES; i++) //Goes through modules database
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	3301      	adds	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	2b09      	cmp	r3, #9
 8000a2a:	dde7      	ble.n	80009fc <s_find+0x3c>
 8000a2c:	e000      	b.n	8000a30 <s_find+0x70>
				break;				//exit from the cycle
 8000a2e:	bf00      	nop
		}
		return success;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e0d5      	b.n	8000be0 <s_find+0x220>
	} // end common help

	//Module search (first token is always module name)
    for(int i=0; i<MAX_MODULES; i++)	//cycle through modules
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	e0c7      	b.n	8000bca <s_find+0x20a>
    {
        if(strcasecmp(module[i].name, token[0]) == 0)	//module was found
 8000a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8000bf4 <s_find+0x234>)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	4413      	add	r3, r2
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	f002 f9bc 	bl	8002dc8 <strcasecmp>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 80b6 	bne.w	8000bc4 <s_find+0x204>
        {
            if(strcasecmp(token[1], "help" ) == 0 || strcasecmp("?", token[1]) == 0 ) //module's help was requested
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4962      	ldr	r1, [pc, #392]	@ (8000be8 <s_find+0x228>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f9b1 	bl	8002dc8 <strcasecmp>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d009      	beq.n	8000a80 <s_find+0xc0>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	485d      	ldr	r0, [pc, #372]	@ (8000bec <s_find+0x22c>)
 8000a76:	f002 f9a7 	bl	8002dc8 <strcasecmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d139      	bne.n	8000af4 <s_find+0x134>
            {
            	actionPtr = NULL;
 8000a80:	4b5e      	ldr	r3, [pc, #376]	@ (8000bfc <s_find+0x23c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]

            	function_t *funcInModule = module[i].funcList; //Get all functions in module
 8000a86:	4a5b      	ldr	r2, [pc, #364]	@ (8000bf4 <s_find+0x234>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3308      	adds	r3, #8
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]
            	printBuffer(module[i].help);
 8000a94:	4a57      	ldr	r2, [pc, #348]	@ (8000bf4 <s_find+0x234>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	4413      	add	r3, r2
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd1d 	bl	80014e0 <printBuffer>
            	printBuffer("Following functions are declared in this module: \r\n");
 8000aa6:	4856      	ldr	r0, [pc, #344]	@ (8000c00 <s_find+0x240>)
 8000aa8:	f000 fd1a 	bl	80014e0 <printBuffer>
            	for(int funcNum=0; funcNum<module[i].funcNum; funcNum++)	// Output all available functions in module
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e015      	b.n	8000ade <s_find+0x11e>
            	{
            		printBuffer(module[i].funcList[funcNum].name);
 8000ab2:	4a50      	ldr	r2, [pc, #320]	@ (8000bf4 <s_find+0x234>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	3308      	adds	r3, #8
 8000abc:	6819      	ldr	r1, [r3, #0]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fd07 	bl	80014e0 <printBuffer>
            		printBuffer("\r\n");
 8000ad2:	4849      	ldr	r0, [pc, #292]	@ (8000bf8 <s_find+0x238>)
 8000ad4:	f000 fd04 	bl	80014e0 <printBuffer>
            	for(int funcNum=0; funcNum<module[i].funcNum; funcNum++)	// Output all available functions in module
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4a45      	ldr	r2, [pc, #276]	@ (8000bf4 <s_find+0x234>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8e0      	bhi.n	8000ab2 <s_find+0xf2>
            	}
            	return success;
 8000af0:	2300      	movs	r3, #0
 8000af2:	e075      	b.n	8000be0 <s_find+0x220>
            }

            //Function search (second token is always function name)
            for(uint32_t j=0; j<module[i].funcNum; j++)	//cycle through functions in module
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	e053      	b.n	8000ba2 <s_find+0x1e2>
            {
                if(strcasecmp(module[i].funcList[j].name, token[1]) == 0)	//function was found
 8000afa:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf4 <s_find+0x234>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	4413      	add	r3, r2
 8000b02:	3308      	adds	r3, #8
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3304      	adds	r3, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	f002 f953 	bl	8002dc8 <strcasecmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d139      	bne.n	8000b9c <s_find+0x1dc>
                {
                    if(strcasecmp(token[2], "help") == 0 || strcasecmp("?", token[2]) == 0 ) //function's help was requested
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	492e      	ldr	r1, [pc, #184]	@ (8000be8 <s_find+0x228>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 f949 	bl	8002dc8 <strcasecmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d009      	beq.n	8000b50 <s_find+0x190>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3308      	adds	r3, #8
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4829      	ldr	r0, [pc, #164]	@ (8000bec <s_find+0x22c>)
 8000b46:	f002 f93f 	bl	8002dc8 <strcasecmp>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d114      	bne.n	8000b7a <s_find+0x1ba>
                    {
                    	actionPtr = NULL;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <s_find+0x23c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
                    	printBuffer(module[i].funcList[j].help);
 8000b56:	4a27      	ldr	r2, [pc, #156]	@ (8000bf4 <s_find+0x234>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3308      	adds	r3, #8
 8000b60:	6819      	ldr	r1, [r3, #0]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fcb5 	bl	80014e0 <printBuffer>
                    	return success;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e032      	b.n	8000be0 <s_find+0x220>
                    }
                    else	//function's action was requested
                    {
                    	actionPtr = module[i].funcList[j].func;	//Save pointer on the found function
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <s_find+0x234>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	4413      	add	r3, r2
 8000b82:	3308      	adds	r3, #8
 8000b84:	6819      	ldr	r1, [r3, #0]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	4a19      	ldr	r2, [pc, #100]	@ (8000bfc <s_find+0x23c>)
 8000b96:	6013      	str	r3, [r2, #0]
                    	return success;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e021      	b.n	8000be0 <s_find+0x220>
            for(uint32_t j=0; j<module[i].funcNum; j++)	//cycle through functions in module
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <s_find+0x234>)
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	4413      	add	r3, r2
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d3a2      	bcc.n	8000afa <s_find+0x13a>
                    }
                }
            }
            printBuffer(unknownFunction);	//If requested function was not found
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <s_find+0x244>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fc91 	bl	80014e0 <printBuffer>
            return s_functionNotFound;
 8000bbe:	f06f 031f 	mvn.w	r3, #31
 8000bc2:	e00d      	b.n	8000be0 <s_find+0x220>
    for(int i=0; i<MAX_MODULES; i++)	//cycle through modules
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	2b09      	cmp	r3, #9
 8000bce:	f77f af34 	ble.w	8000a3a <s_find+0x7a>
        }
    }
    printBuffer(unknownModule);	//If requested module was not found
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <s_find+0x248>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fc82 	bl	80014e0 <printBuffer>
    return s_moduleNotFound;
 8000bdc:	f06f 031e 	mvn.w	r3, #30
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	080044a8 	.word	0x080044a8
 8000bec:	080044b0 	.word	0x080044b0
 8000bf0:	20000070 	.word	0x20000070
 8000bf4:	20000154 	.word	0x20000154
 8000bf8:	080044b4 	.word	0x080044b4
 8000bfc:	20000224 	.word	0x20000224
 8000c00:	080044b8 	.word	0x080044b8
 8000c04:	20000078 	.word	0x20000078
 8000c08:	20000074 	.word	0x20000074

08000c0c <s_execute>:
 * shellStatus_e execution code
 *
 * @TODO:	Access rights
 */
shellStatus_e s_execute(cmd_t function)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	int8_t execResult = unknownError;	//Stores wrapper function execution result
 8000c14:	23ff      	movs	r3, #255	@ 0xff
 8000c16:	73fb      	strb	r3, [r7, #15]

	if(function == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <s_execute+0x18>
		return e_funcExecution;
 8000c1e:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8000c22:	e089      	b.n	8000d38 <s_execute+0x12c>

	uint8_t argc = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73bb      	strb	r3, [r7, #14]
	argc = countArgc(token);
 8000c28:	4845      	ldr	r0, [pc, #276]	@ (8000d40 <s_execute+0x134>)
 8000c2a:	f7ff fe2d 	bl	8000888 <countArgc>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73bb      	strb	r3, [r7, #14]

	execResult = function(argc, &token[2]);	//Execute function
 8000c32:	7bba      	ldrb	r2, [r7, #14]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4943      	ldr	r1, [pc, #268]	@ (8000d44 <s_execute+0x138>)
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]

	//Output message with function execution info. Message depends on execution code.
	switch(execResult)
 8000c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c44:	332c      	adds	r3, #44	@ 0x2c
 8000c46:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c48:	d870      	bhi.n	8000d2c <s_execute+0x120>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <s_execute+0x44>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000d25 	.word	0x08000d25
 8000c54:	08000d1d 	.word	0x08000d1d
 8000c58:	08000d15 	.word	0x08000d15
 8000c5c:	08000d0d 	.word	0x08000d0d
 8000c60:	08000d2d 	.word	0x08000d2d
 8000c64:	08000d2d 	.word	0x08000d2d
 8000c68:	08000d2d 	.word	0x08000d2d
 8000c6c:	08000d2d 	.word	0x08000d2d
 8000c70:	08000d2d 	.word	0x08000d2d
 8000c74:	08000d2d 	.word	0x08000d2d
 8000c78:	08000d2d 	.word	0x08000d2d
 8000c7c:	08000d2d 	.word	0x08000d2d
 8000c80:	08000d2d 	.word	0x08000d2d
 8000c84:	08000d2d 	.word	0x08000d2d
 8000c88:	08000d2d 	.word	0x08000d2d
 8000c8c:	08000d2d 	.word	0x08000d2d
 8000c90:	08000d2d 	.word	0x08000d2d
 8000c94:	08000d2d 	.word	0x08000d2d
 8000c98:	08000d2d 	.word	0x08000d2d
 8000c9c:	08000d2d 	.word	0x08000d2d
 8000ca0:	08000d2d 	.word	0x08000d2d
 8000ca4:	08000d2d 	.word	0x08000d2d
 8000ca8:	08000d2d 	.word	0x08000d2d
 8000cac:	08000d2d 	.word	0x08000d2d
 8000cb0:	08000d2d 	.word	0x08000d2d
 8000cb4:	08000d2d 	.word	0x08000d2d
 8000cb8:	08000d2d 	.word	0x08000d2d
 8000cbc:	08000d2d 	.word	0x08000d2d
 8000cc0:	08000d2d 	.word	0x08000d2d
 8000cc4:	08000d2d 	.word	0x08000d2d
 8000cc8:	08000d2d 	.word	0x08000d2d
 8000ccc:	08000d2d 	.word	0x08000d2d
 8000cd0:	08000d2d 	.word	0x08000d2d
 8000cd4:	08000d2d 	.word	0x08000d2d
 8000cd8:	08000d2d 	.word	0x08000d2d
 8000cdc:	08000d2d 	.word	0x08000d2d
 8000ce0:	08000d2d 	.word	0x08000d2d
 8000ce4:	08000d2d 	.word	0x08000d2d
 8000ce8:	08000d2d 	.word	0x08000d2d
 8000cec:	08000d2d 	.word	0x08000d2d
 8000cf0:	08000d2d 	.word	0x08000d2d
 8000cf4:	08000d2d 	.word	0x08000d2d
 8000cf8:	08000d2d 	.word	0x08000d2d
 8000cfc:	08000d05 	.word	0x08000d05
 8000d00:	08000d35 	.word	0x08000d35
		{
			break;
		}
		case unknownError:
		{
			printBuffer("Unknown error\r\n");
 8000d04:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <s_execute+0x13c>)
 8000d06:	f000 fbeb 	bl	80014e0 <printBuffer>
			break;
 8000d0a:	e014      	b.n	8000d36 <s_execute+0x12a>
		}
		case e_funcExecution:
		{
			printBuffer("Execution error or function doesn't create.\r\n");
 8000d0c:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <s_execute+0x140>)
 8000d0e:	f000 fbe7 	bl	80014e0 <printBuffer>
			break;
 8000d12:	e010      	b.n	8000d36 <s_execute+0x12a>
		}
		case e_argValue:
		{
			printBuffer("Invalid argument value.\r\n");
 8000d14:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <s_execute+0x144>)
 8000d16:	f000 fbe3 	bl	80014e0 <printBuffer>
			break;
 8000d1a:	e00c      	b.n	8000d36 <s_execute+0x12a>
		}
		case e_argType:
		{
			printBuffer("Invalid argument type.\r\n");
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <s_execute+0x148>)
 8000d1e:	f000 fbdf 	bl	80014e0 <printBuffer>
			break;
 8000d22:	e008      	b.n	8000d36 <s_execute+0x12a>
		}
		case e_argNumber:
		{
			printBuffer("Invalid arguments amount.\r\n\r\n");
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <s_execute+0x14c>)
 8000d26:	f000 fbdb 	bl	80014e0 <printBuffer>
			break;
 8000d2a:	e004      	b.n	8000d36 <s_execute+0x12a>
		}
		default:
		{
			printBuffer("Unknown error\r\n");
 8000d2c:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <s_execute+0x13c>)
 8000d2e:	f000 fbd7 	bl	80014e0 <printBuffer>
			break;
 8000d32:	e000      	b.n	8000d36 <s_execute+0x12a>
			break;
 8000d34:	bf00      	nop
		}
	}

	return success;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200001f4 	.word	0x200001f4
 8000d44:	200001fc 	.word	0x200001fc
 8000d48:	080044ec 	.word	0x080044ec
 8000d4c:	080044fc 	.word	0x080044fc
 8000d50:	0800452c 	.word	0x0800452c
 8000d54:	08004548 	.word	0x08004548
 8000d58:	08004564 	.word	0x08004564

08000d5c <s_storeCmd>:
 * shellStatus_e Function execution result
 *
 * @todo: TODO: make option to store available commands only
 */
shellStatus_e s_storeCmd(const char *in_buffer)
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000d68:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000d6c:	6018      	str	r0, [r3, #0]
#ifdef S_STORE_IN_FLASH

	uint32_t temp[256] = {0,};	///< Temporary buffer intended to work with info from flash. Represents FLASH page.
 8000d6e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000d72:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000d76:	4618      	mov	r0, r3
 8000d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f002 f819 	bl	8002db6 <memset>
	uint32_t offset = 0;		///< Points to necessary command if temporary buffer
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

	// Copy from FLASH to RAM (to temp array)
	temp[0] = (*(__IO uint32_t*)(S_CURRRENT_CMD_PTR));
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec0 <s_storeCmd+0x164>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000d92:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000d96:	601a      	str	r2, [r3, #0]
	for(int i=0; i<(S_END_PAGE_ADDR-S_START_PAGE_ADDR)/4; i++)	//255 uint32_t variables are in flash page
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8000d9e:	e014      	b.n	8000dca <s_storeCmd+0x6e>
		temp[i+1] = (*(__IO uint32_t*)(S_START_PAGE_ADDR+i*4));
 8000da0:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8000da4:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <s_storeCmd+0x168>)
 8000da6:	4413      	add	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	6809      	ldr	r1, [r1, #0]
 8000db4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000db8:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0; i<(S_END_PAGE_ADDR-S_START_PAGE_ADDR)/4; i++)	//255 uint32_t variables are in flash page
 8000dc0:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8000dca:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000dce:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dd0:	dde6      	ble.n	8000da0 <s_storeCmd+0x44>

	// Increment pointer to last stored cli command in RAM
	temp[0]++;
 8000dd2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000dd6:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000de2:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000de6:	601a      	str	r2, [r3, #0]
	if(temp[0] >= S_STORED_NUM_CMDS) temp[0] = 0;
 8000de8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000dec:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	d905      	bls.n	8000e02 <s_storeCmd+0xa6>
 8000df6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000dfa:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

	// Store last cli command in RAM (in temp array)
	offset = (temp[0] * (S_CMD_SECTOR_SIZE/4)) + 1;
 8000e02:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000e06:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3301      	adds	r3, #1
 8000e18:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
	memcpy(&(temp[offset]), in_buffer, S_CMD_SECTOR_SIZE);
 8000e1c:	f107 020c 	add.w	r2, r7, #12
 8000e20:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	18d0      	adds	r0, r2, r3
 8000e28:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000e2c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000e30:	2234      	movs	r2, #52	@ 0x34
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	f002 f8cf 	bl	8002fd6 <memcpy>

	// Erase FLASH page and save RAM in FLASH
	HAL_FLASH_Unlock();
 8000e38:	f000 fe7e 	bl	8001b38 <HAL_FLASH_Unlock>

//	FLASH_PageErase(S_CURRRENT_CMD_PTR);
//	CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));

	FLASH_PageErase(S_CURRRENT_CMD_PTR);
 8000e3c:	4820      	ldr	r0, [pc, #128]	@ (8000ec0 <s_storeCmd+0x164>)
 8000e3e:	f000 ff63 	bl	8001d08 <FLASH_PageErase>
	CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <s_storeCmd+0x16c>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	4a20      	ldr	r2, [pc, #128]	@ (8000ec8 <s_storeCmd+0x16c>)
 8000e48:	f023 0302 	bic.w	r3, r3, #2
 8000e4c:	6113      	str	r3, [r2, #16]

	SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <s_storeCmd+0x16c>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <s_storeCmd+0x16c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6113      	str	r3, [r2, #16]
	for(int i=0; i<256; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e60:	e01c      	b.n	8000e9c <s_storeCmd+0x140>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, S_CURRRENT_CMD_PTR+i*4, temp[i]);
 8000e62:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e66:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000e6a:	f503 43fc 	add.w	r3, r3, #32256	@ 0x7e00
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000e76:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000e7a:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	2200      	movs	r2, #0
 8000e84:	461c      	mov	r4, r3
 8000e86:	4615      	mov	r5, r2
 8000e88:	4622      	mov	r2, r4
 8000e8a:	462b      	mov	r3, r5
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 fde3 	bl	8001a58 <HAL_FLASH_Program>
	for(int i=0; i<256; i++)
 8000e92:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e96:	3301      	adds	r3, #1
 8000e98:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e9c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000ea0:	2bff      	cmp	r3, #255	@ 0xff
 8000ea2:	ddde      	ble.n	8000e62 <s_storeCmd+0x106>

	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <s_storeCmd+0x16c>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <s_storeCmd+0x16c>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6113      	str	r3, [r2, #16]

	HAL_FLASH_Lock();
 8000eb0:	f000 fe68 	bl	8001b84 <HAL_FLASH_Lock>

	return success;
 8000eb4:	2300      	movs	r3, #0
	if(lastCmd >= S_STORED_NUM_CMDS) lastCmd = 0;

	return success;
#endif
	return e_funcExecution;
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec0:	0801f800 	.word	0x0801f800
 8000ec4:	02007e01 	.word	0x02007e01
 8000ec8:	40022000 	.word	0x40022000

08000ecc <s_getCmd>:
 * @note: This function works with bytes(uint8_t pointer). S_CMD_SECTOR_SIZE mustn't be divided by 4
 *
 * @todo: TODO: Add down arrow button press processing
 */
shellStatus_e s_getCmd(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
	extern int8_t tty_rx_buffer_size;

	static int8_t depth = 0;
	static uint32_t prevCurrent = 0xffffffff;

	uint32_t lastCmd = 0xffffffff;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	607b      	str	r3, [r7, #4]
	uint8_t *ptr = NULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]

	if((*(__IO uint32_t*)(S_CURRRENT_CMD_PTR)) == 0xFFFFFFFF)
 8000edc:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <s_getCmd+0xec>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d102      	bne.n	8000eec <s_getCmd+0x20>
		return e_funcExecution;
 8000ee6:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8000eea:	e061      	b.n	8000fb0 <s_getCmd+0xe4>

	if(prevCurrent != (*(__IO uint32_t*)(S_CURRRENT_CMD_PTR)))
 8000eec:	4b32      	ldr	r3, [pc, #200]	@ (8000fb8 <s_getCmd+0xec>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <s_getCmd+0xf0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d002      	beq.n	8000efe <s_getCmd+0x32>
		depth = 0;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <s_getCmd+0xf4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]

	lastCmd = (uint8_t)(*(__IO uint32_t*)(S_CURRRENT_CMD_PTR)) - depth;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <s_getCmd+0xec>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <s_getCmd+0xf4>)
 8000f08:	f993 3000 	ldrsb.w	r3, [r3]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	607b      	str	r3, [r7, #4]

	if((int8_t)lastCmd <= (int8_t)-1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da09      	bge.n	8000f2c <s_getCmd+0x60>
	{
		depth = (*(__IO uint32_t*)(S_CURRRENT_CMD_PTR)) - S_STORED_NUM_CMDS + 1;
 8000f18:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <s_getCmd+0xec>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3b09      	subs	r3, #9
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <s_getCmd+0xf4>)
 8000f26:	701a      	strb	r2, [r3, #0]
		lastCmd = S_STORED_NUM_CMDS - 1;
 8000f28:	2309      	movs	r3, #9
 8000f2a:	607b      	str	r3, [r7, #4]
	}

	ptr = S_START_PAGE_ADDR + (lastCmd*S_CMD_SECTOR_SIZE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2234      	movs	r2, #52	@ 0x34
 8000f30:	fb03 f202 	mul.w	r2, r3, r2
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <s_getCmd+0xf8>)
 8000f36:	4413      	add	r3, r2
 8000f38:	603b      	str	r3, [r7, #0]

	depth++;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <s_getCmd+0xf4>)
 8000f3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <s_getCmd+0xf4>)
 8000f4a:	701a      	strb	r2, [r3, #0]
	if(depth >= S_STORED_NUM_CMDS)
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <s_getCmd+0xf4>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	2b09      	cmp	r3, #9
 8000f54:	dd02      	ble.n	8000f5c <s_getCmd+0x90>
		depth = 0;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <s_getCmd+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

	if(ptr == NULL)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <s_getCmd+0x9c>
		return e_funcExecution;
 8000f62:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8000f66:	e023      	b.n	8000fb0 <s_getCmd+0xe4>

	if(*(uint32_t *)ptr == 0xFFFFFFFF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d102      	bne.n	8000f78 <s_getCmd+0xac>
		return e_funcExecution;
 8000f72:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8000f76:	e01b      	b.n	8000fb0 <s_getCmd+0xe4>

	printBuffer(ptr);
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f000 fab1 	bl	80014e0 <printBuffer>
	strcpy(tty_rx_buffer, ptr);
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <s_getCmd+0xfc>)
 8000f82:	f002 f820 	bl	8002fc6 <strcpy>
	cmd_string_ptr = tty_rx_buffer+strlen(ptr)-1;
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f7ff f8e0 	bl	800014c <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <s_getCmd+0xfc>)
 8000f92:	4413      	add	r3, r2
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <s_getCmd+0x100>)
 8000f96:	6013      	str	r3, [r2, #0]
	tty_rx_buffer_size = strlen(ptr);
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f7ff f8d7 	bl	800014c <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <s_getCmd+0x104>)
 8000fa4:	701a      	strb	r2, [r3, #0]

	prevCurrent = (*(__IO uint32_t*)(S_CURRRENT_CMD_PTR));
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <s_getCmd+0xec>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <s_getCmd+0xf0>)
 8000fac:	6013      	str	r3, [r2, #0]

	return success;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	0801f800 	.word	0x0801f800
 8000fbc:	2000007c 	.word	0x2000007c
 8000fc0:	20000228 	.word	0x20000228
 8000fc4:	0801f804 	.word	0x0801f804
 8000fc8:	20000230 	.word	0x20000230
 8000fcc:	20000084 	.word	0x20000084
 8000fd0:	200002b0 	.word	0x200002b0

08000fd4 <shell_processing>:

int8_t shell_processing(uint8_t *in_buffer)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	int8_t status = -1;
 8000fdc:	23ff      	movs	r3, #255	@ 0xff
 8000fde:	73fb      	strb	r3, [r7, #15]

	//todo: store valid only commands
	status = s_storeCmd(in_buffer);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff febb 	bl	8000d5c <s_storeCmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]

	status = s_parse(in_buffer);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fcaa 	bl	8000944 <s_parse>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
	status = s_find(token);
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <shell_processing+0x54>)
 8000ff6:	f7ff fce3 	bl	80009c0 <s_find>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	status = s_execute(actionPtr);
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <shell_processing+0x58>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe02 	bl	8000c0c <s_execute>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
//			printBuffer("Arg error\r\n");
//			break;
//		}
//	}

	memset(token, 0, sizeof(token));
 800100c:	2230      	movs	r2, #48	@ 0x30
 800100e:	2100      	movs	r1, #0
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <shell_processing+0x54>)
 8001012:	f001 fed0 	bl	8002db6 <memset>
	actionPtr = NULL;
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <shell_processing+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

	return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001f4 	.word	0x200001f4
 800102c:	20000224 	.word	0x20000224

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_MspInit+0x5c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a14      	ldr	r2, [pc, #80]	@ (800108c <HAL_MspInit+0x5c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_MspInit+0x5c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_MspInit+0x5c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_MspInit+0x5c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_MspInit+0x5c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_MspInit+0x60>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_MspInit+0x60>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <HAL_UART_MspInit+0x88>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d12f      	bne.n	8001114 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <HAL_UART_MspInit+0x8c>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	4a19      	ldr	r2, [pc, #100]	@ (8001120 <HAL_UART_MspInit+0x8c>)
 80010ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010be:	61d3      	str	r3, [r2, #28]
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_UART_MspInit+0x8c>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_UART_MspInit+0x8c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <HAL_UART_MspInit+0x8c>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <HAL_UART_MspInit+0x8c>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <HAL_UART_MspInit+0x90>)
 80010f8:	f000 fe26 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010fc:	2308      	movs	r3, #8
 80010fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <HAL_UART_MspInit+0x90>)
 8001110:	f000 fe1a 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004400 	.word	0x40004400
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <MemManage_Handler+0x4>

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <UsageFault_Handler+0x4>

08001150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t cnt = 0;

	if(cnt == 200)
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <SysTick_Handler+0x34>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2bc8      	cmp	r3, #200	@ 0xc8
 800117e:	d109      	bne.n	8001194 <SysTick_Handler+0x20>
	{
		GPIOC->ODR ^= 1<<13;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <SysTick_Handler+0x38>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <SysTick_Handler+0x38>)
 8001186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800118a:	60d3      	str	r3, [r2, #12]
		cnt = 0;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SysTick_Handler+0x34>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e005      	b.n	80011a0 <SysTick_Handler+0x2c>
	}
	else
	{
		cnt++;
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Handler+0x34>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <SysTick_Handler+0x34>)
 800119e:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a0:	f000 fb5a 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000229 	.word	0x20000229
 80011ac:	40011000 	.word	0x40011000

080011b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <_kill>:

int _kill(int pid, int sig)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011c8:	f001 fed0 	bl	8002f6c <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2216      	movs	r2, #22
 80011d0:	601a      	str	r2, [r3, #0]
  return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_exit>:

void _exit (int status)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffe7 	bl	80011be <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <_exit+0x12>

080011f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e00a      	b.n	800121c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001206:	f3af 8000 	nop.w
 800120a:	4601      	mov	r1, r0
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60ba      	str	r2, [r7, #8]
 8001212:	b2ca      	uxtb	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf0      	blt.n	8001206 <_read+0x12>
  }

  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e009      	b.n	8001254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf1      	blt.n	8001240 <_write+0x12>
  }
  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_close>:

int _close(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800128c:	605a      	str	r2, [r3, #4]
  return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <_isatty>:

int _isatty(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
	...

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f001 fe38 	bl	8002f6c <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20005000 	.word	0x20005000
 8001328:	00000400 	.word	0x00000400
 800132c:	2000022c 	.word	0x2000022c
 8001330:	20000428 	.word	0x20000428

08001334 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4906      	ldr	r1, [pc, #24]	@ (8001374 <__NVIC_EnableIRQ+0x34>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100

08001378 <dma_init>:
/**
 * @brief
 * DMA settings for one-byte information exchange
 */
void dma_init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;		//Clock on DMA
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <dma_init+0x80>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a1d      	ldr	r2, [pc, #116]	@ (80013f8 <dma_init+0x80>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6153      	str	r3, [r2, #20]

	//
	//		DMA RX
	//
	DMA1_Channel6->CCR = 0;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <dma_init+0x84>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
	DMA1_Channel6->CPAR = (uint32_t)(&(USART2->DR));
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <dma_init+0x84>)
 8001390:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <dma_init+0x88>)
 8001392:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CMAR = (uint32_t)(&(byte_buff));
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <dma_init+0x84>)
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <dma_init+0x8c>)
 8001398:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CNDTR = 1;	//bytes number
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <dma_init+0x84>)
 800139c:	2201      	movs	r2, #1
 800139e:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR = 0x1082;	//TODO: refactor magic numbers
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <dma_init+0x84>)
 80013a2:	f241 0282 	movw	r2, #4226	@ 0x1082
 80013a6:	601a      	str	r2, [r3, #0]


	//
	//	DMA TX
	//
	DMA1_Channel7->CCR = 0;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <dma_init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	DMA1_Channel7->CPAR = (uint32_t)(&(USART2->DR));
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <dma_init+0x90>)
 80013b0:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <dma_init+0x88>)
 80013b2:	609a      	str	r2, [r3, #8]
	DMA1_Channel7->CMAR = (uint32_t)(&(byte_buff));
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <dma_init+0x90>)
 80013b6:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <dma_init+0x8c>)
 80013b8:	60da      	str	r2, [r3, #12]
	DMA1_Channel7->CNDTR = 1;	//bytes number
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <dma_init+0x90>)
 80013bc:	2201      	movs	r2, #1
 80013be:	605a      	str	r2, [r3, #4]
	DMA1_Channel7->CCR = 0x1090;	//TODO: refactor magic numbers
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <dma_init+0x90>)
 80013c2:	f241 0290 	movw	r2, #4240	@ 0x1090
 80013c6:	601a      	str	r2, [r3, #0]

	//--------------------------
	DMA1->IFCR = 0xFFFFFFFF;
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <dma_init+0x94>)
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013d0:	2010      	movs	r0, #16
 80013d2:	f7ff ffb5 	bl	8001340 <__NVIC_EnableIRQ>

	DMA1_Channel6->CCR |= 1;		//Enable DMA RX stream
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <dma_init+0x84>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <dma_init+0x84>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]

	memset(tty_rx_buffer, 0, TTY_RX_BUF_SIZE);	//clear rx buffer
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	2100      	movs	r1, #0
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <dma_init+0x98>)
 80013e8:	f001 fce5 	bl	8002db6 <memset>
	printBuffer("> ");
 80013ec:	4809      	ldr	r0, [pc, #36]	@ (8001414 <dma_init+0x9c>)
 80013ee:	f000 f877 	bl	80014e0 <printBuffer>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	4002006c 	.word	0x4002006c
 8001400:	40004404 	.word	0x40004404
 8001404:	200002b1 	.word	0x200002b1
 8001408:	40020080 	.word	0x40020080
 800140c:	40020000 	.word	0x40020000
 8001410:	20000230 	.word	0x20000230
 8001414:	08004584 	.word	0x08004584

08001418 <waitChar>:
 * @brief
 * Waits one byte from keyboard via DMA
 *
 */
void waitChar(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	DMA1_Channel6->CCR = 0;
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <waitChar+0x3c>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	//while((DMA1_Channel6->CCR&DMA_CCR_EN)){;}	//wait until EN bit resets

	DMA1_Channel6->CMAR = (uint32_t)(&(byte_buff));
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <waitChar+0x3c>)
 8001424:	4a0c      	ldr	r2, [pc, #48]	@ (8001458 <waitChar+0x40>)
 8001426:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CNDTR = 1;		//bytes number
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <waitChar+0x3c>)
 800142a:	2201      	movs	r2, #1
 800142c:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR = 0x1082;	//TODO: refactor magic number
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <waitChar+0x3c>)
 8001430:	f241 0282 	movw	r2, #4226	@ 0x1082
 8001434:	601a      	str	r2, [r3, #0]

	DMA1->IFCR = 0xFFFFFFFF;
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <waitChar+0x44>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	605a      	str	r2, [r3, #4]
	//DMA1->ISR = DMA_ISR_TCIF7;	//RX transfer complete interrupt enable
	DMA1_Channel6->CCR |= 1;		//Enable DMA RX stream
 800143e:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <waitChar+0x3c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <waitChar+0x3c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6013      	str	r3, [r2, #0]
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	4002006c 	.word	0x4002006c
 8001458:	200002b1 	.word	0x200002b1
 800145c:	40020000 	.word	0x40020000

08001460 <printChar>:
/**
 * @brief
 * Transmits one byte to the screen
 */
void printChar(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	DMA1_Channel7->CCR = 0;
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <printChar+0x34>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	//while((DMA1_Channel7->CCR&DMA_CCR_EN)){;}	//wait until EN bit resets

	DMA1_Channel7->CMAR = (uint32_t)(&(byte_buff));
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <printChar+0x34>)
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <printChar+0x38>)
 800146e:	60da      	str	r2, [r3, #12]
	DMA1_Channel7->CNDTR = 1;		//bytes number
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <printChar+0x34>)
 8001472:	2201      	movs	r2, #1
 8001474:	605a      	str	r2, [r3, #4]
	DMA1_Channel7->CCR = 0x1090;	//TODO: refactor magic number
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <printChar+0x34>)
 8001478:	f241 0290 	movw	r2, #4240	@ 0x1090
 800147c:	601a      	str	r2, [r3, #0]

	DMA1_Channel7->CCR |= 1;		//Enable DMA TX stream
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <printChar+0x34>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <printChar+0x34>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40020080 	.word	0x40020080
 8001498:	200002b1 	.word	0x200002b1

0800149c <deleteFromScreen>:
 *
 * @return
 * None
 */
void deleteFromScreen(uint8_t symbols)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	DMA1_Channel7->CCR = 0;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <deleteFromScreen+0x3c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
	//while((DMA1_Channel7->CCR&DMA_CCR_EN)){;}	//wait until EN bit resets

	DMA1_Channel7->CMAR = (uint32_t)(&(backspace));
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <deleteFromScreen+0x3c>)
 80014ae:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <deleteFromScreen+0x40>)
 80014b0:	60da      	str	r2, [r3, #12]
	DMA1_Channel7->CNDTR = symbols;	//bytes number
 80014b2:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <deleteFromScreen+0x3c>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	6053      	str	r3, [r2, #4]
	DMA1_Channel7->CCR = 0x1010;	//TODO: refactor magic number
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <deleteFromScreen+0x3c>)
 80014ba:	f241 0210 	movw	r2, #4112	@ 0x1010
 80014be:	601a      	str	r2, [r3, #0]

	DMA1_Channel7->CCR |= 1;		//Enable DMA TX stream
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <deleteFromScreen+0x3c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <deleteFromScreen+0x3c>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40020080 	.word	0x40020080
 80014dc:	20000088 	.word	0x20000088

080014e0 <printBuffer>:
 *
 * @return
 *
 */
int8_t printBuffer(const char *buffer)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	uint8_t size = strlen(buffer);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7fe fe2f 	bl	800014c <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	72fb      	strb	r3, [r7, #11]
	if(NULL == buffer)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <printBuffer+0x1e>
		return -1;	//TODO: Argument error
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e025      	b.n	800154a <printBuffer+0x6a>

	if(0 == size)
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <printBuffer+0x2a>
		return -1;	//TODO: argument error
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	e01f      	b.n	800154a <printBuffer+0x6a>

	DMA1_Channel7->CCR = 0;
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <printBuffer+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
	//while((DMA1_Channel7->CCR&DMA_CCR_EN)){;}	//wait until EN bit resets

	DMA1_Channel7->CMAR = (uint32_t)(buffer);
 8001510:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <printBuffer+0x74>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = size;	//bytes number
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <printBuffer+0x74>)
 8001518:	7afb      	ldrb	r3, [r7, #11]
 800151a:	6053      	str	r3, [r2, #4]
	DMA1_Channel7->CCR = 0x1090;	//TODO: refactor magic number
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <printBuffer+0x74>)
 800151e:	f241 0290 	movw	r2, #4240	@ 0x1090
 8001522:	601a      	str	r2, [r3, #0]

	DMA1_Channel7->CCR |= 1;		//Enable DMA TX stream
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <printBuffer+0x74>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <printBuffer+0x74>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]

	//while((DMA1->ISR & DMA_ISR_TCIF7) == 0){;}	//Wait while DMA1_Channel7 transfer doesn't complete
	for(int z=0; z<30000; z++){__NOP();}	//TODO: remove delay
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e003      	b.n	800153e <printBuffer+0x5e>
 8001536:	bf00      	nop
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001544:	4293      	cmp	r3, r2
 8001546:	ddf6      	ble.n	8001536 <printBuffer+0x56>
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020080 	.word	0x40020080

08001558 <DMA1_Channel6_IRQHandler>:
 * 	@brief DMA RX channel haldler
 *
 * 	It called when one byte from keyborad was received
 */
void DMA1_Channel6_IRQHandler()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
	DMA1->IFCR = 0xFFFFFFFF;
 800155e:	4b7d      	ldr	r3, [pc, #500]	@ (8001754 <DMA1_Channel6_IRQHandler+0x1fc>)
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	605a      	str	r2, [r3, #4]

	if(byte_buff == 0x7F)		//	Backspace was pressed
 8001566:	4b7c      	ldr	r3, [pc, #496]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b7f      	cmp	r3, #127	@ 0x7f
 800156c:	d117      	bne.n	800159e <DMA1_Channel6_IRQHandler+0x46>
	{
		if(cmd_string_ptr >= tty_rx_buffer)	//if pointer to the end on string greater of equal than first byte address in rx buffer
 800156e:	4b7b      	ldr	r3, [pc, #492]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d30f      	bcc.n	8001598 <DMA1_Channel6_IRQHandler+0x40>
		{
			*(cmd_string_ptr--) = '\0';	//delete byte
 8001578:	4b78      	ldr	r3, [pc, #480]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	4977      	ldr	r1, [pc, #476]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001580:	600a      	str	r2, [r1, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
			tty_rx_buffer_size--;
 8001586:	4b77      	ldr	r3, [pc, #476]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001588:	f993 3000 	ldrsb.w	r3, [r3]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	4b73      	ldr	r3, [pc, #460]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001596:	701a      	strb	r2, [r3, #0]
		}
		printChar();
 8001598:	f7ff ff62 	bl	8001460 <printChar>
 800159c:	e0d3      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
	}
	else if(byte_buff == '\r')	//	Enter was pressed
 800159e:	4b6e      	ldr	r3, [pc, #440]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b0d      	cmp	r3, #13
 80015a4:	d111      	bne.n	80015ca <DMA1_Channel6_IRQHandler+0x72>
	{
		printBuffer("\r\n");
 80015a6:	4870      	ldr	r0, [pc, #448]	@ (8001768 <DMA1_Channel6_IRQHandler+0x210>)
 80015a8:	f7ff ff9a 	bl	80014e0 <printBuffer>
				tty_rx_buffer,
				strlen(tty_rx_buffer));
		printBuffer(answ);
#endif

		shell_processing(tty_rx_buffer);
 80015ac:	486c      	ldr	r0, [pc, #432]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 80015ae:	f7ff fd11 	bl	8000fd4 <shell_processing>

		printBuffer("\r\n> ");
 80015b2:	486e      	ldr	r0, [pc, #440]	@ (800176c <DMA1_Channel6_IRQHandler+0x214>)
 80015b4:	f7ff ff94 	bl	80014e0 <printBuffer>
		memset(tty_rx_buffer, 0, TTY_RX_BUF_SIZE);	//clear rx buffer
 80015b8:	2280      	movs	r2, #128	@ 0x80
 80015ba:	2100      	movs	r1, #0
 80015bc:	4868      	ldr	r0, [pc, #416]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 80015be:	f001 fbfa 	bl	8002db6 <memset>
		cmd_string_ptr = tty_rx_buffer-1;	//carrige return to start of buffer
 80015c2:	4a6b      	ldr	r2, [pc, #428]	@ (8001770 <DMA1_Channel6_IRQHandler+0x218>)
 80015c4:	4b65      	ldr	r3, [pc, #404]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e0bd      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>

	}
	else if(byte_buff == 'A')	//	'A' or 'arrow up' was pressed
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b41      	cmp	r3, #65	@ 0x41
 80015d0:	d13f      	bne.n	8001652 <DMA1_Channel6_IRQHandler+0xfa>
	{

		*(++cmd_string_ptr) = byte_buff;
 80015d2:	4b62      	ldr	r3, [pc, #392]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a60      	ldr	r2, [pc, #384]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b5f      	ldr	r3, [pc, #380]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	701a      	strb	r2, [r3, #0]
		tty_rx_buffer_size++;
 80015e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 80015e8:	f993 3000 	ldrsb.w	r3, [r3]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b25a      	sxtb	r2, r3
 80015f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 80015f6:	701a      	strb	r2, [r3, #0]

		if(strstr(tty_rx_buffer, "\e[A") != NULL) // 'arrow up' pressed processing
 80015f8:	495e      	ldr	r1, [pc, #376]	@ (8001774 <DMA1_Channel6_IRQHandler+0x21c>)
 80015fa:	4859      	ldr	r0, [pc, #356]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 80015fc:	f001 fc5a 	bl	8002eb4 <strstr>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d022      	beq.n	800164c <DMA1_Channel6_IRQHandler+0xf4>
		{
			memset(tty_rx_buffer, 0, TTY_RX_BUF_SIZE);	//clear rx buffer
 8001606:	2280      	movs	r2, #128	@ 0x80
 8001608:	2100      	movs	r1, #0
 800160a:	4855      	ldr	r0, [pc, #340]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 800160c:	f001 fbd3 	bl	8002db6 <memset>
			cmd_string_ptr = tty_rx_buffer-1;	//carrige return to start of buffer
 8001610:	4a57      	ldr	r2, [pc, #348]	@ (8001770 <DMA1_Channel6_IRQHandler+0x218>)
 8001612:	4b52      	ldr	r3, [pc, #328]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001614:	601a      	str	r2, [r3, #0]


			if(tty_rx_buffer_size != 0)
 8001616:	4b53      	ldr	r3, [pc, #332]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001618:	f993 3000 	ldrsb.w	r3, [r3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <DMA1_Channel6_IRQHandler+0xd6>
				deleteFromScreen(tty_rx_buffer_size);
 8001620:	4b50      	ldr	r3, [pc, #320]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001622:	f993 3000 	ldrsb.w	r3, [r3]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff37 	bl	800149c <deleteFromScreen>
			for(int del=0; del<=30000; del++){__NOP();}
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e003      	b.n	800163c <DMA1_Channel6_IRQHandler+0xe4>
 8001634:	bf00      	nop
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001642:	4293      	cmp	r3, r2
 8001644:	ddf6      	ble.n	8001634 <DMA1_Channel6_IRQHandler+0xdc>

			s_getCmd();
 8001646:	f7ff fc41 	bl	8000ecc <s_getCmd>
 800164a:	e07c      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
		}
		else	// 'A' pressed processing
		{
			printChar();
 800164c:	f7ff ff08 	bl	8001460 <printChar>
 8001650:	e079      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
		}
	}
	else if(byte_buff == 'B')	//	'B' or 'arrow down' was pressed
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b42      	cmp	r3, #66	@ 0x42
 8001658:	d125      	bne.n	80016a6 <DMA1_Channel6_IRQHandler+0x14e>
	{
		//store in buffer
		*(++cmd_string_ptr) = byte_buff;
 800165a:	4b40      	ldr	r3, [pc, #256]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a3e      	ldr	r2, [pc, #248]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b3d      	ldr	r3, [pc, #244]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a3b      	ldr	r2, [pc, #236]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	701a      	strb	r2, [r3, #0]
		tty_rx_buffer_size++;
 800166e:	4b3d      	ldr	r3, [pc, #244]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001670:	f993 3000 	ldrsb.w	r3, [r3]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3301      	adds	r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	b25a      	sxtb	r2, r3
 800167c:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 800167e:	701a      	strb	r2, [r3, #0]


		if(strstr(tty_rx_buffer, "\e[B") != NULL) // 'arrow down' pressed processing
 8001680:	493d      	ldr	r1, [pc, #244]	@ (8001778 <DMA1_Channel6_IRQHandler+0x220>)
 8001682:	4837      	ldr	r0, [pc, #220]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 8001684:	f001 fc16 	bl	8002eb4 <strstr>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <DMA1_Channel6_IRQHandler+0x148>
		{
			//printBuffer("Arrow DOWN");
			memset(tty_rx_buffer, 0, TTY_RX_BUF_SIZE);	//clear rx buffer
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	2100      	movs	r1, #0
 8001692:	4833      	ldr	r0, [pc, #204]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 8001694:	f001 fb8f 	bl	8002db6 <memset>
			cmd_string_ptr = tty_rx_buffer-1;	//carrige return to start of buffer
 8001698:	4a35      	ldr	r2, [pc, #212]	@ (8001770 <DMA1_Channel6_IRQHandler+0x218>)
 800169a:	4b30      	ldr	r3, [pc, #192]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e052      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
		}
		else	// 'B' pressed processing
		{
			printChar();
 80016a0:	f7ff fede 	bl	8001460 <printChar>
 80016a4:	e04f      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
		}
	}
	else if(byte_buff == '\e')
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b1b      	cmp	r3, #27
 80016ac:	d113      	bne.n	80016d6 <DMA1_Channel6_IRQHandler+0x17e>
	{
		*(++cmd_string_ptr) = byte_buff;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a29      	ldr	r2, [pc, #164]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b28      	ldr	r3, [pc, #160]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
		tty_rx_buffer_size++;
 80016c2:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 80016c4:	f993 3000 	ldrsb.w	r3, [r3]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e037      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
	}
	else if(byte_buff == '[')
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b5b      	cmp	r3, #91	@ 0x5b
 80016dc:	d11e      	bne.n	800171c <DMA1_Channel6_IRQHandler+0x1c4>
	{
		*(++cmd_string_ptr) = byte_buff;
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	701a      	strb	r2, [r3, #0]
		tty_rx_buffer_size++;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 80016f4:	f993 3000 	ldrsb.w	r3, [r3]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001702:	701a      	strb	r2, [r3, #0]

		if(strstr(tty_rx_buffer, "\e[") != NULL)
 8001704:	491d      	ldr	r1, [pc, #116]	@ (800177c <DMA1_Channel6_IRQHandler+0x224>)
 8001706:	4816      	ldr	r0, [pc, #88]	@ (8001760 <DMA1_Channel6_IRQHandler+0x208>)
 8001708:	f001 fbd4 	bl	8002eb4 <strstr>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <DMA1_Channel6_IRQHandler+0x1be>
		{
			__NOP();
 8001712:	bf00      	nop
 8001714:	e017      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>
		}
		else
		{
			printChar();
 8001716:	f7ff fea3 	bl	8001460 <printChar>
 800171a:	e014      	b.n	8001746 <DMA1_Channel6_IRQHandler+0x1ee>

	}
	else						//	Any key was pressed
	{

		*(++cmd_string_ptr) = byte_buff;
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <DMA1_Channel6_IRQHandler+0x204>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <DMA1_Channel6_IRQHandler+0x200>)
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	701a      	strb	r2, [r3, #0]
		tty_rx_buffer_size++;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001732:	f993 3000 	ldrsb.w	r3, [r3]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b25a      	sxtb	r2, r3
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <DMA1_Channel6_IRQHandler+0x20c>)
 8001740:	701a      	strb	r2, [r3, #0]
		printChar();
 8001742:	f7ff fe8d 	bl	8001460 <printChar>
	}

	//printChar();
	waitChar();
 8001746:	f7ff fe67 	bl	8001418 <waitChar>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40020000 	.word	0x40020000
 8001758:	200002b1 	.word	0x200002b1
 800175c:	20000084 	.word	0x20000084
 8001760:	20000230 	.word	0x20000230
 8001764:	200002b0 	.word	0x200002b0
 8001768:	08004588 	.word	0x08004588
 800176c:	0800458c 	.word	0x0800458c
 8001770:	2000022f 	.word	0x2000022f
 8001774:	08004594 	.word	0x08004594
 8001778:	08004598 	.word	0x08004598
 800177c:	0800459c 	.word	0x0800459c

08001780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff fdd8 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001786:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001788:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800179c:	4c09      	ldr	r4, [pc, #36]	@ (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f001 fbe5 	bl	8002f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ae:	f7fe fdc9 	bl	8000344 <main>
  bx lr
 80017b2:	4770      	bx	lr
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80017bc:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 80017c0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80017c4:	20000424 	.word	0x20000424

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_Init+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_Init+0x28>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f907 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fc22 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40022000 	.word	0x40022000

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f911 	bl	8001a3e <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f8e7 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000080 	.word	0x20000080
 8001850:	20000090 	.word	0x20000090
 8001854:	2000008c 	.word	0x2000008c

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_IncTick+0x1c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_IncTick+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a03      	ldr	r2, [pc, #12]	@ (8001878 <HAL_IncTick+0x20>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000090 	.word	0x20000090
 8001878:	200002b4 	.word	0x200002b4

0800187c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b02      	ldr	r3, [pc, #8]	@ (800188c <HAL_GetTick+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	200002b4 	.word	0x200002b4

08001890 <__NVIC_SetPriorityGrouping>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff90 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff49 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff5e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff90 	bl	8001948 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5f 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb0 	bl	80019ac <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a72:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_FLASH_Program+0xd8>)
 8001a74:	7e1b      	ldrb	r3, [r3, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_FLASH_Program+0x26>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e054      	b.n	8001b28 <HAL_FLASH_Program+0xd0>
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b30 <HAL_FLASH_Program+0xd8>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a84:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a88:	f000 f8a8 	bl	8001bdc <FLASH_WaitForLastOperation>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d144      	bne.n	8001b20 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	757b      	strb	r3, [r7, #21]
 8001aa0:	e007      	b.n	8001ab2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d102      	bne.n	8001aae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	757b      	strb	r3, [r7, #21]
 8001aac:	e001      	b.n	8001ab2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75bb      	strb	r3, [r7, #22]
 8001ab6:	e02d      	b.n	8001b14 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001ab8:	7dbb      	ldrb	r3, [r7, #22]
 8001aba:	005a      	lsls	r2, r3, #1
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	eb02 0c03 	add.w	ip, r2, r3
 8001ac2:	7dbb      	ldrb	r3, [r7, #22]
 8001ac4:	0119      	lsls	r1, r3, #4
 8001ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aca:	f1c1 0620 	rsb	r6, r1, #32
 8001ace:	f1a1 0020 	sub.w	r0, r1, #32
 8001ad2:	fa22 f401 	lsr.w	r4, r2, r1
 8001ad6:	fa03 f606 	lsl.w	r6, r3, r6
 8001ada:	4334      	orrs	r4, r6
 8001adc:	fa23 f000 	lsr.w	r0, r3, r0
 8001ae0:	4304      	orrs	r4, r0
 8001ae2:	fa23 f501 	lsr.w	r5, r3, r1
 8001ae6:	b2a3      	uxth	r3, r4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4660      	mov	r0, ip
 8001aec:	f000 f85a 	bl	8001ba4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001af0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001af4:	f000 f872 	bl	8001bdc <FLASH_WaitForLastOperation>
 8001af8:	4603      	mov	r3, r0
 8001afa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_FLASH_Program+0xdc>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_FLASH_Program+0xdc>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d107      	bne.n	8001b1e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001b0e:	7dbb      	ldrb	r3, [r7, #22]
 8001b10:	3301      	adds	r3, #1
 8001b12:	75bb      	strb	r3, [r7, #22]
 8001b14:	7dba      	ldrb	r2, [r7, #22]
 8001b16:	7d7b      	ldrb	r3, [r7, #21]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3cd      	bcc.n	8001ab8 <HAL_FLASH_Program+0x60>
 8001b1c:	e000      	b.n	8001b20 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001b1e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_FLASH_Program+0xd8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	761a      	strb	r2, [r3, #24]

  return status;
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b30:	200002b8 	.word	0x200002b8
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_FLASH_Unlock+0x40>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_FLASH_Unlock+0x40>)
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_FLASH_Unlock+0x44>)
 8001b52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_FLASH_Unlock+0x40>)
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_FLASH_Unlock+0x48>)
 8001b58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <HAL_FLASH_Unlock+0x40>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	45670123 	.word	0x45670123
 8001b80:	cdef89ab 	.word	0xcdef89ab

08001b84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_FLASH_Lock+0x1c>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_FLASH_Lock+0x1c>)
 8001b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <FLASH_Program_HalfWord+0x30>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <FLASH_Program_HalfWord+0x34>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <FLASH_Program_HalfWord+0x34>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	801a      	strh	r2, [r3, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200002b8 	.word	0x200002b8
 8001bd8:	40022000 	.word	0x40022000

08001bdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fe4a 	bl	800187c <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bea:	e010      	b.n	8001c0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d00c      	beq.n	8001c0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <FLASH_WaitForLastOperation+0x2e>
 8001bfa:	f7ff fe3f 	bl	800187c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d201      	bcs.n	8001c0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e025      	b.n	8001c5a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <FLASH_WaitForLastOperation+0x88>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e8      	bne.n	8001bec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <FLASH_WaitForLastOperation+0x88>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <FLASH_WaitForLastOperation+0x88>)
 8001c28:	2220      	movs	r2, #32
 8001c2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <FLASH_WaitForLastOperation+0x88>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10b      	bne.n	8001c50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <FLASH_WaitForLastOperation+0x88>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <FLASH_WaitForLastOperation+0x88>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c50:	f000 f80a 	bl	8001c68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40022000 	.word	0x40022000

08001c68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <FLASH_SetErrorCode+0x9c>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <FLASH_SetErrorCode+0x9c>)
 8001c88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <FLASH_SetErrorCode+0x9c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <FLASH_SetErrorCode+0x9c>)
 8001ca8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <FLASH_SetErrorCode+0x9c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <FLASH_SetErrorCode+0x9c>)
 8001cc8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f240 1201 	movw	r2, #257	@ 0x101
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d106      	bne.n	8001cee <FLASH_SetErrorCode+0x86>
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4a06      	ldr	r2, [pc, #24]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	61d3      	str	r3, [r2, #28]
}  
 8001cec:	e002      	b.n	8001cf4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001cee:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <FLASH_SetErrorCode+0x98>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60d3      	str	r3, [r2, #12]
}  
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000
 8001d04:	200002b8 	.word	0x200002b8

08001d08 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <FLASH_PageErase+0x38>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <FLASH_PageErase+0x3c>)
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <FLASH_PageErase+0x3c>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <FLASH_PageErase+0x3c>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <FLASH_PageErase+0x3c>)
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <FLASH_PageErase+0x3c>)
 8001d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d32:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200002b8 	.word	0x200002b8
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b08b      	sub	sp, #44	@ 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e169      	b.n	8002030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f040 8158 	bne.w	800202a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a9a      	ldr	r2, [pc, #616]	@ (8001fe8 <HAL_GPIO_Init+0x2a0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d05e      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d84:	4a98      	ldr	r2, [pc, #608]	@ (8001fe8 <HAL_GPIO_Init+0x2a0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d875      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a98      	ldr	r2, [pc, #608]	@ (8001fec <HAL_GPIO_Init+0x2a4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d058      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d90:	4a96      	ldr	r2, [pc, #600]	@ (8001fec <HAL_GPIO_Init+0x2a4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d86f      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001d96:	4a96      	ldr	r2, [pc, #600]	@ (8001ff0 <HAL_GPIO_Init+0x2a8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d052      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d9c:	4a94      	ldr	r2, [pc, #592]	@ (8001ff0 <HAL_GPIO_Init+0x2a8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d869      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001da2:	4a94      	ldr	r2, [pc, #592]	@ (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d04c      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001da8:	4a92      	ldr	r2, [pc, #584]	@ (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d863      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dae:	4a92      	ldr	r2, [pc, #584]	@ (8001ff8 <HAL_GPIO_Init+0x2b0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d046      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001db4:	4a90      	ldr	r2, [pc, #576]	@ (8001ff8 <HAL_GPIO_Init+0x2b0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d85d      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d82a      	bhi.n	8001e14 <HAL_GPIO_Init+0xcc>
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d859      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc8 <HAL_GPIO_Init+0x80>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e1d 	.word	0x08001e1d
 8001dd0:	08001e2f 	.word	0x08001e2f
 8001dd4:	08001e71 	.word	0x08001e71
 8001dd8:	08001e77 	.word	0x08001e77
 8001ddc:	08001e77 	.word	0x08001e77
 8001de0:	08001e77 	.word	0x08001e77
 8001de4:	08001e77 	.word	0x08001e77
 8001de8:	08001e77 	.word	0x08001e77
 8001dec:	08001e77 	.word	0x08001e77
 8001df0:	08001e77 	.word	0x08001e77
 8001df4:	08001e77 	.word	0x08001e77
 8001df8:	08001e77 	.word	0x08001e77
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e77 	.word	0x08001e77
 8001e04:	08001e77 	.word	0x08001e77
 8001e08:	08001e77 	.word	0x08001e77
 8001e0c:	08001e25 	.word	0x08001e25
 8001e10:	08001e39 	.word	0x08001e39
 8001e14:	4a79      	ldr	r2, [pc, #484]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e1a:	e02c      	b.n	8001e76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e029      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e024      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	3308      	adds	r3, #8
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e01f      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	330c      	adds	r3, #12
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e01a      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e013      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	611a      	str	r2, [r3, #16]
          break;
 8001e62:	e009      	b.n	8001e78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e64:	2308      	movs	r3, #8
 8001e66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	615a      	str	r2, [r3, #20]
          break;
 8001e6e:	e003      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          break;
 8001e76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	@ 0xff
 8001e7c:	d801      	bhi.n	8001e82 <HAL_GPIO_Init+0x13a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_Init+0x13e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2bff      	cmp	r3, #255	@ 0xff
 8001e8c:	d802      	bhi.n	8001e94 <HAL_GPIO_Init+0x14c>
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x152>
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	3b08      	subs	r3, #8
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80b1 	beq.w	800202a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8002000 <HAL_GPIO_Init+0x2b8>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8002000 <HAL_GPIO_Init+0x2b8>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8002000 <HAL_GPIO_Init+0x2b8>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ee0:	4a48      	ldr	r2, [pc, #288]	@ (8002004 <HAL_GPIO_Init+0x2bc>)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_GPIO_Init+0x1ec>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800200c <HAL_GPIO_Init+0x2c4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00d      	beq.n	8001f30 <HAL_GPIO_Init+0x1e8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3e      	ldr	r2, [pc, #248]	@ (8002010 <HAL_GPIO_Init+0x2c8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_Init+0x1e4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8002014 <HAL_GPIO_Init+0x2cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e004      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f34:	2300      	movs	r3, #0
 8001f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f38:	f002 0203 	and.w	r2, r2, #3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f46:	492f      	ldr	r1, [pc, #188]	@ (8002004 <HAL_GPIO_Init+0x2bc>)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f60:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	492c      	ldr	r1, [pc, #176]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4928      	ldr	r1, [pc, #160]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f88:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4922      	ldr	r1, [pc, #136]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f96:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	491e      	ldr	r1, [pc, #120]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4918      	ldr	r1, [pc, #96]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4914      	ldr	r1, [pc, #80]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d021      	beq.n	800201c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	490e      	ldr	r1, [pc, #56]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
 8001fe4:	e021      	b.n	800202a <HAL_GPIO_Init+0x2e2>
 8001fe6:	bf00      	nop
 8001fe8:	10320000 	.word	0x10320000
 8001fec:	10310000 	.word	0x10310000
 8001ff0:	10220000 	.word	0x10220000
 8001ff4:	10210000 	.word	0x10210000
 8001ff8:	10120000 	.word	0x10120000
 8001ffc:	10110000 	.word	0x10110000
 8002000:	40021000 	.word	0x40021000
 8002004:	40010000 	.word	0x40010000
 8002008:	40010800 	.word	0x40010800
 800200c:	40010c00 	.word	0x40010c00
 8002010:	40011000 	.word	0x40011000
 8002014:	40011400 	.word	0x40011400
 8002018:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_GPIO_Init+0x304>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	43db      	mvns	r3, r3
 8002024:	4909      	ldr	r1, [pc, #36]	@ (800204c <HAL_GPIO_Init+0x304>)
 8002026:	4013      	ands	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	f47f ae8e 	bne.w	8001d5c <HAL_GPIO_Init+0x14>
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	372c      	adds	r7, #44	@ 0x2c
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e272      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8087 	beq.w	80021ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a0:	4b92      	ldr	r3, [pc, #584]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d00c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ac:	4b8f      	ldr	r3, [pc, #572]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d112      	bne.n	80020de <HAL_RCC_OscConfig+0x5e>
 80020b8:	4b8c      	ldr	r3, [pc, #560]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d10b      	bne.n	80020de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c6:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d06c      	beq.n	80021ac <HAL_RCC_OscConfig+0x12c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d168      	bne.n	80021ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e24c      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x76>
 80020e8:	4b80      	ldr	r3, [pc, #512]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a7f      	ldr	r2, [pc, #508]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e02e      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b7b      	ldr	r3, [pc, #492]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7a      	ldr	r2, [pc, #488]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b78      	ldr	r3, [pc, #480]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a77      	ldr	r2, [pc, #476]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e01d      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0xbc>
 8002122:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a71      	ldr	r2, [pc, #452]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6e      	ldr	r2, [pc, #440]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 800213c:	4b6b      	ldr	r3, [pc, #428]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a6a      	ldr	r2, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b68      	ldr	r3, [pc, #416]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a67      	ldr	r2, [pc, #412]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fb8e 	bl	800187c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff fb8a 	bl	800187c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	@ 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e200      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b5d      	ldr	r3, [pc, #372]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xe4>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fb7a 	bl	800187c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fb76 	bl	800187c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1ec      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x10c>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ba:	4b4c      	ldr	r3, [pc, #304]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c6:	4b49      	ldr	r3, [pc, #292]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x18c>
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1c0      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4939      	ldr	r1, [pc, #228]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fb2f 	bl	800187c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff fb2b 	bl	800187c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1a1      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4927      	ldr	r1, [pc, #156]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b26      	ldr	r3, [pc, #152]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fb0e 	bl	800187c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff fb0a 	bl	800187c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e180      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03a      	beq.n	8002304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_RCC_OscConfig+0x274>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7ff faee 	bl	800187c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff faea 	bl	800187c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e160      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 face 	bl	8002864 <RCC_Delay>
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_RCC_OscConfig+0x274>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7ff fad4 	bl	800187c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d6:	e00f      	b.n	80022f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fad0 	bl	800187c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d908      	bls.n	80022f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e146      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	42420000 	.word	0x42420000
 80022f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b92      	ldr	r3, [pc, #584]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e9      	bne.n	80022d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a6 	beq.w	800245e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b8b      	ldr	r3, [pc, #556]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a87      	ldr	r2, [pc, #540]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b85      	ldr	r3, [pc, #532]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234a:	4b7f      	ldr	r3, [pc, #508]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7e      	ldr	r2, [pc, #504]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002356:	f7ff fa91 	bl	800187c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7ff fa8d 	bl	800187c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	@ 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e103      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x312>
 8002384:	4b6f      	ldr	r3, [pc, #444]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a6e      	ldr	r2, [pc, #440]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	e02d      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x334>
 800239a:	4b6a      	ldr	r3, [pc, #424]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a69      	ldr	r2, [pc, #420]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b67      	ldr	r3, [pc, #412]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a66      	ldr	r2, [pc, #408]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	e01c      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x356>
 80023bc:	4b61      	ldr	r3, [pc, #388]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a60      	ldr	r2, [pc, #384]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 80023d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a5a      	ldr	r2, [pc, #360]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b58      	ldr	r3, [pc, #352]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a57      	ldr	r2, [pc, #348]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d015      	beq.n	8002422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7ff fa41 	bl	800187c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7ff fa3d 	bl	800187c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0b1      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	4b4b      	ldr	r3, [pc, #300]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ee      	beq.n	80023fe <HAL_RCC_OscConfig+0x37e>
 8002420:	e014      	b.n	800244c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff fa2b 	bl	800187c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fa27 	bl	800187c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e09b      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	4b40      	ldr	r3, [pc, #256]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ee      	bne.n	800242a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b3c      	ldr	r3, [pc, #240]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a3b      	ldr	r2, [pc, #236]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8087 	beq.w	8002576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002468:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d061      	beq.n	8002538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d146      	bne.n	800250a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b33      	ldr	r3, [pc, #204]	@ (800254c <HAL_RCC_OscConfig+0x4cc>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff f9fb 	bl	800187c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff f9f7 	bl	800187c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e06d      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b0:	d108      	bne.n	80024c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024b2:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4921      	ldr	r1, [pc, #132]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a19      	ldr	r1, [r3, #32]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	430b      	orrs	r3, r1
 80024d6:	491b      	ldr	r1, [pc, #108]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_RCC_OscConfig+0x4cc>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff f9cb 	bl	800187c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7ff f9c7 	bl	800187c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e03d      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x46a>
 8002508:	e035      	b.n	8002576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_RCC_OscConfig+0x4cc>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff f9b4 	bl	800187c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7ff f9b0 	bl	800187c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e026      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x498>
 8002536:	e01e      	b.n	8002576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e019      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_OscConfig+0x500>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d0      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b6a      	ldr	r3, [pc, #424]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b67      	ldr	r3, [pc, #412]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4965      	ldr	r1, [pc, #404]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d040      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d115      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e073      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06b      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4936      	ldr	r1, [pc, #216]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002674:	f7ff f902 	bl	800187c <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7ff f8fe 	bl	800187c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e053      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d210      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4922      	ldr	r1, [pc, #136]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fe:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	@ (800274c <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x1cc>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_ClockConfig+0x1d0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f860 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	080045a0 	.word	0x080045a0
 8002750:	20000080 	.word	0x20000080
 8002754:	2000008c 	.word	0x2000008c

08002758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002772:	4b1e      	ldr	r3, [pc, #120]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x30>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x36>
 8002786:	e027      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800278a:	613b      	str	r3, [r7, #16]
      break;
 800278c:	e027      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a17      	ldr	r2, [pc, #92]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x94>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0c5b      	lsrs	r3, r3, #17
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	4a11      	ldr	r2, [pc, #68]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ba:	fb03 f202 	mul.w	r2, r3, r2
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e004      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	613b      	str	r3, [r7, #16]
      break;
 80027d6:	e002      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027de:	693b      	ldr	r3, [r7, #16]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	080045b8 	.word	0x080045b8
 80027f8:	080045c8 	.word	0x080045c8
 80027fc:	003d0900 	.word	0x003d0900

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b02      	ldr	r3, [pc, #8]	@ (8002810 <HAL_RCC_GetHCLKFreq+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000080 	.word	0x20000080

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	@ (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	080045b0 	.word	0x080045b0

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffde 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	080045b0 	.word	0x080045b0

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000080 	.word	0x20000080
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e042      	b.n	8002938 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fbe4 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	@ 0x24
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f82b 	bl	8002940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800297a:	f023 030c 	bic.w	r3, r3, #12
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	430b      	orrs	r3, r1
 8002986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a54 <UART_SetConfig+0x114>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029a8:	f7ff ff48 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	e002      	b.n	80029b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029b0:	f7ff ff30 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80029b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4a22      	ldr	r2, [pc, #136]	@ (8002a58 <UART_SetConfig+0x118>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	0119      	lsls	r1, r3, #4
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <UART_SetConfig+0x118>)
 80029ee:	fba3 0302 	umull	r0, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2064      	movs	r0, #100	@ 0x64
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	@ 0x32
 8002a00:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <UART_SetConfig+0x118>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a0c:	4419      	add	r1, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <UART_SetConfig+0x118>)
 8002a26:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2064      	movs	r0, #100	@ 0x64
 8002a2e:	fb00 f303 	mul.w	r3, r0, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	3332      	adds	r3, #50	@ 0x32
 8002a38:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	440a      	add	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40013800 	.word	0x40013800
 8002a58:	51eb851f 	.word	0x51eb851f

08002a5c <atoi>:
 8002a5c:	220a      	movs	r2, #10
 8002a5e:	2100      	movs	r1, #0
 8002a60:	f000 b87a 	b.w	8002b58 <strtol>

08002a64 <_strtol_l.constprop.0>:
 8002a64:	2b24      	cmp	r3, #36	@ 0x24
 8002a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6a:	4686      	mov	lr, r0
 8002a6c:	4690      	mov	r8, r2
 8002a6e:	d801      	bhi.n	8002a74 <_strtol_l.constprop.0+0x10>
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <_strtol_l.constprop.0+0x1e>
 8002a74:	f000 fa7a 	bl	8002f6c <__errno>
 8002a78:	2316      	movs	r3, #22
 8002a7a:	6003      	str	r3, [r0, #0]
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a82:	460d      	mov	r5, r1
 8002a84:	4833      	ldr	r0, [pc, #204]	@ (8002b54 <_strtol_l.constprop.0+0xf0>)
 8002a86:	462a      	mov	r2, r5
 8002a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a8c:	5d06      	ldrb	r6, [r0, r4]
 8002a8e:	f016 0608 	ands.w	r6, r6, #8
 8002a92:	d1f8      	bne.n	8002a86 <_strtol_l.constprop.0+0x22>
 8002a94:	2c2d      	cmp	r4, #45	@ 0x2d
 8002a96:	d12d      	bne.n	8002af4 <_strtol_l.constprop.0+0x90>
 8002a98:	2601      	movs	r6, #1
 8002a9a:	782c      	ldrb	r4, [r5, #0]
 8002a9c:	1c95      	adds	r5, r2, #2
 8002a9e:	f033 0210 	bics.w	r2, r3, #16
 8002aa2:	d109      	bne.n	8002ab8 <_strtol_l.constprop.0+0x54>
 8002aa4:	2c30      	cmp	r4, #48	@ 0x30
 8002aa6:	d12a      	bne.n	8002afe <_strtol_l.constprop.0+0x9a>
 8002aa8:	782a      	ldrb	r2, [r5, #0]
 8002aaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002aae:	2a58      	cmp	r2, #88	@ 0x58
 8002ab0:	d125      	bne.n	8002afe <_strtol_l.constprop.0+0x9a>
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	786c      	ldrb	r4, [r5, #1]
 8002ab6:	3502      	adds	r5, #2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002abe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002ac2:	fbbc f9f3 	udiv	r9, ip, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	fb03 ca19 	mls	sl, r3, r9, ip
 8002acc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002ad0:	2f09      	cmp	r7, #9
 8002ad2:	d81b      	bhi.n	8002b0c <_strtol_l.constprop.0+0xa8>
 8002ad4:	463c      	mov	r4, r7
 8002ad6:	42a3      	cmp	r3, r4
 8002ad8:	dd27      	ble.n	8002b2a <_strtol_l.constprop.0+0xc6>
 8002ada:	1c57      	adds	r7, r2, #1
 8002adc:	d007      	beq.n	8002aee <_strtol_l.constprop.0+0x8a>
 8002ade:	4581      	cmp	r9, r0
 8002ae0:	d320      	bcc.n	8002b24 <_strtol_l.constprop.0+0xc0>
 8002ae2:	d101      	bne.n	8002ae8 <_strtol_l.constprop.0+0x84>
 8002ae4:	45a2      	cmp	sl, r4
 8002ae6:	db1d      	blt.n	8002b24 <_strtol_l.constprop.0+0xc0>
 8002ae8:	2201      	movs	r2, #1
 8002aea:	fb00 4003 	mla	r0, r0, r3, r4
 8002aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002af2:	e7eb      	b.n	8002acc <_strtol_l.constprop.0+0x68>
 8002af4:	2c2b      	cmp	r4, #43	@ 0x2b
 8002af6:	bf04      	itt	eq
 8002af8:	782c      	ldrbeq	r4, [r5, #0]
 8002afa:	1c95      	addeq	r5, r2, #2
 8002afc:	e7cf      	b.n	8002a9e <_strtol_l.constprop.0+0x3a>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1da      	bne.n	8002ab8 <_strtol_l.constprop.0+0x54>
 8002b02:	2c30      	cmp	r4, #48	@ 0x30
 8002b04:	bf0c      	ite	eq
 8002b06:	2308      	moveq	r3, #8
 8002b08:	230a      	movne	r3, #10
 8002b0a:	e7d5      	b.n	8002ab8 <_strtol_l.constprop.0+0x54>
 8002b0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002b10:	2f19      	cmp	r7, #25
 8002b12:	d801      	bhi.n	8002b18 <_strtol_l.constprop.0+0xb4>
 8002b14:	3c37      	subs	r4, #55	@ 0x37
 8002b16:	e7de      	b.n	8002ad6 <_strtol_l.constprop.0+0x72>
 8002b18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002b1c:	2f19      	cmp	r7, #25
 8002b1e:	d804      	bhi.n	8002b2a <_strtol_l.constprop.0+0xc6>
 8002b20:	3c57      	subs	r4, #87	@ 0x57
 8002b22:	e7d8      	b.n	8002ad6 <_strtol_l.constprop.0+0x72>
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	e7e1      	b.n	8002aee <_strtol_l.constprop.0+0x8a>
 8002b2a:	1c53      	adds	r3, r2, #1
 8002b2c:	d108      	bne.n	8002b40 <_strtol_l.constprop.0+0xdc>
 8002b2e:	2322      	movs	r3, #34	@ 0x22
 8002b30:	4660      	mov	r0, ip
 8002b32:	f8ce 3000 	str.w	r3, [lr]
 8002b36:	f1b8 0f00 	cmp.w	r8, #0
 8002b3a:	d0a0      	beq.n	8002a7e <_strtol_l.constprop.0+0x1a>
 8002b3c:	1e69      	subs	r1, r5, #1
 8002b3e:	e006      	b.n	8002b4e <_strtol_l.constprop.0+0xea>
 8002b40:	b106      	cbz	r6, 8002b44 <_strtol_l.constprop.0+0xe0>
 8002b42:	4240      	negs	r0, r0
 8002b44:	f1b8 0f00 	cmp.w	r8, #0
 8002b48:	d099      	beq.n	8002a7e <_strtol_l.constprop.0+0x1a>
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	d1f6      	bne.n	8002b3c <_strtol_l.constprop.0+0xd8>
 8002b4e:	f8c8 1000 	str.w	r1, [r8]
 8002b52:	e794      	b.n	8002a7e <_strtol_l.constprop.0+0x1a>
 8002b54:	080045cb 	.word	0x080045cb

08002b58 <strtol>:
 8002b58:	4613      	mov	r3, r2
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	4601      	mov	r1, r0
 8002b5e:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <strtol+0x10>)
 8002b60:	6800      	ldr	r0, [r0, #0]
 8002b62:	f7ff bf7f 	b.w	8002a64 <_strtol_l.constprop.0>
 8002b66:	bf00      	nop
 8002b68:	200000a0 	.word	0x200000a0

08002b6c <std>:
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	b510      	push	{r4, lr}
 8002b70:	4604      	mov	r4, r0
 8002b72:	e9c0 3300 	strd	r3, r3, [r0]
 8002b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b7a:	6083      	str	r3, [r0, #8]
 8002b7c:	8181      	strh	r1, [r0, #12]
 8002b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b80:	81c2      	strh	r2, [r0, #14]
 8002b82:	6183      	str	r3, [r0, #24]
 8002b84:	4619      	mov	r1, r3
 8002b86:	2208      	movs	r2, #8
 8002b88:	305c      	adds	r0, #92	@ 0x5c
 8002b8a:	f000 f914 	bl	8002db6 <memset>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <std+0x58>)
 8002b90:	6224      	str	r4, [r4, #32]
 8002b92:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <std+0x5c>)
 8002b96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <std+0x60>)
 8002b9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <std+0x64>)
 8002b9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <std+0x68>)
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	d006      	beq.n	8002bb4 <std+0x48>
 8002ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002baa:	4294      	cmp	r4, r2
 8002bac:	d002      	beq.n	8002bb4 <std+0x48>
 8002bae:	33d0      	adds	r3, #208	@ 0xd0
 8002bb0:	429c      	cmp	r4, r3
 8002bb2:	d105      	bne.n	8002bc0 <std+0x54>
 8002bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bbc:	f000 ba00 	b.w	8002fc0 <__retarget_lock_init_recursive>
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	bf00      	nop
 8002bc4:	08002d31 	.word	0x08002d31
 8002bc8:	08002d53 	.word	0x08002d53
 8002bcc:	08002d8b 	.word	0x08002d8b
 8002bd0:	08002daf 	.word	0x08002daf
 8002bd4:	200002d8 	.word	0x200002d8

08002bd8 <stdio_exit_handler>:
 8002bd8:	4a02      	ldr	r2, [pc, #8]	@ (8002be4 <stdio_exit_handler+0xc>)
 8002bda:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <stdio_exit_handler+0x10>)
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <stdio_exit_handler+0x14>)
 8002bde:	f000 b869 	b.w	8002cb4 <_fwalk_sglue>
 8002be2:	bf00      	nop
 8002be4:	20000094 	.word	0x20000094
 8002be8:	08003901 	.word	0x08003901
 8002bec:	200000a4 	.word	0x200000a4

08002bf0 <cleanup_stdio>:
 8002bf0:	6841      	ldr	r1, [r0, #4]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <cleanup_stdio+0x34>)
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4299      	cmp	r1, r3
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	d001      	beq.n	8002c00 <cleanup_stdio+0x10>
 8002bfc:	f000 fe80 	bl	8003900 <_fflush_r>
 8002c00:	68a1      	ldr	r1, [r4, #8]
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <cleanup_stdio+0x38>)
 8002c04:	4299      	cmp	r1, r3
 8002c06:	d002      	beq.n	8002c0e <cleanup_stdio+0x1e>
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 fe79 	bl	8003900 <_fflush_r>
 8002c0e:	68e1      	ldr	r1, [r4, #12]
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <cleanup_stdio+0x3c>)
 8002c12:	4299      	cmp	r1, r3
 8002c14:	d004      	beq.n	8002c20 <cleanup_stdio+0x30>
 8002c16:	4620      	mov	r0, r4
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c1c:	f000 be70 	b.w	8003900 <_fflush_r>
 8002c20:	bd10      	pop	{r4, pc}
 8002c22:	bf00      	nop
 8002c24:	200002d8 	.word	0x200002d8
 8002c28:	20000340 	.word	0x20000340
 8002c2c:	200003a8 	.word	0x200003a8

08002c30 <global_stdio_init.part.0>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <global_stdio_init.part.0+0x30>)
 8002c34:	4c0b      	ldr	r4, [pc, #44]	@ (8002c64 <global_stdio_init.part.0+0x34>)
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <global_stdio_init.part.0+0x38>)
 8002c38:	4620      	mov	r0, r4
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f7ff ff94 	bl	8002b6c <std>
 8002c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2109      	movs	r1, #9
 8002c4c:	f7ff ff8e 	bl	8002b6c <std>
 8002c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c54:	2202      	movs	r2, #2
 8002c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5a:	2112      	movs	r1, #18
 8002c5c:	f7ff bf86 	b.w	8002b6c <std>
 8002c60:	20000410 	.word	0x20000410
 8002c64:	200002d8 	.word	0x200002d8
 8002c68:	08002bd9 	.word	0x08002bd9

08002c6c <__sfp_lock_acquire>:
 8002c6c:	4801      	ldr	r0, [pc, #4]	@ (8002c74 <__sfp_lock_acquire+0x8>)
 8002c6e:	f000 b9a8 	b.w	8002fc2 <__retarget_lock_acquire_recursive>
 8002c72:	bf00      	nop
 8002c74:	20000419 	.word	0x20000419

08002c78 <__sfp_lock_release>:
 8002c78:	4801      	ldr	r0, [pc, #4]	@ (8002c80 <__sfp_lock_release+0x8>)
 8002c7a:	f000 b9a3 	b.w	8002fc4 <__retarget_lock_release_recursive>
 8002c7e:	bf00      	nop
 8002c80:	20000419 	.word	0x20000419

08002c84 <__sinit>:
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	f7ff fff0 	bl	8002c6c <__sfp_lock_acquire>
 8002c8c:	6a23      	ldr	r3, [r4, #32]
 8002c8e:	b11b      	cbz	r3, 8002c98 <__sinit+0x14>
 8002c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c94:	f7ff bff0 	b.w	8002c78 <__sfp_lock_release>
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <__sinit+0x28>)
 8002c9a:	6223      	str	r3, [r4, #32]
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <__sinit+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f5      	bne.n	8002c90 <__sinit+0xc>
 8002ca4:	f7ff ffc4 	bl	8002c30 <global_stdio_init.part.0>
 8002ca8:	e7f2      	b.n	8002c90 <__sinit+0xc>
 8002caa:	bf00      	nop
 8002cac:	08002bf1 	.word	0x08002bf1
 8002cb0:	20000410 	.word	0x20000410

08002cb4 <_fwalk_sglue>:
 8002cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb8:	4607      	mov	r7, r0
 8002cba:	4688      	mov	r8, r1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8002cc8:	d505      	bpl.n	8002cd6 <_fwalk_sglue+0x22>
 8002cca:	6824      	ldr	r4, [r4, #0]
 8002ccc:	2c00      	cmp	r4, #0
 8002cce:	d1f7      	bne.n	8002cc0 <_fwalk_sglue+0xc>
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cd6:	89ab      	ldrh	r3, [r5, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d907      	bls.n	8002cec <_fwalk_sglue+0x38>
 8002cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d003      	beq.n	8002cec <_fwalk_sglue+0x38>
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4638      	mov	r0, r7
 8002ce8:	47c0      	blx	r8
 8002cea:	4306      	orrs	r6, r0
 8002cec:	3568      	adds	r5, #104	@ 0x68
 8002cee:	e7e9      	b.n	8002cc4 <_fwalk_sglue+0x10>

08002cf0 <siprintf>:
 8002cf0:	b40e      	push	{r1, r2, r3}
 8002cf2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002cf6:	b500      	push	{lr}
 8002cf8:	b09c      	sub	sp, #112	@ 0x70
 8002cfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8002cfc:	9002      	str	r0, [sp, #8]
 8002cfe:	9006      	str	r0, [sp, #24]
 8002d00:	9107      	str	r1, [sp, #28]
 8002d02:	9104      	str	r1, [sp, #16]
 8002d04:	4808      	ldr	r0, [pc, #32]	@ (8002d28 <siprintf+0x38>)
 8002d06:	4909      	ldr	r1, [pc, #36]	@ (8002d2c <siprintf+0x3c>)
 8002d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d0c:	9105      	str	r1, [sp, #20]
 8002d0e:	6800      	ldr	r0, [r0, #0]
 8002d10:	a902      	add	r1, sp, #8
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	f000 fae6 	bl	80032e4 <_svfiprintf_r>
 8002d18:	2200      	movs	r2, #0
 8002d1a:	9b02      	ldr	r3, [sp, #8]
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	b01c      	add	sp, #112	@ 0x70
 8002d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d24:	b003      	add	sp, #12
 8002d26:	4770      	bx	lr
 8002d28:	200000a0 	.word	0x200000a0
 8002d2c:	ffff0208 	.word	0xffff0208

08002d30 <__sread>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	460c      	mov	r4, r1
 8002d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d38:	f000 f8f4 	bl	8002f24 <_read_r>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	bfab      	itete	ge
 8002d40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d42:	89a3      	ldrhlt	r3, [r4, #12]
 8002d44:	181b      	addge	r3, r3, r0
 8002d46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d4a:	bfac      	ite	ge
 8002d4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d4e:	81a3      	strhlt	r3, [r4, #12]
 8002d50:	bd10      	pop	{r4, pc}

08002d52 <__swrite>:
 8002d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d56:	461f      	mov	r7, r3
 8002d58:	898b      	ldrh	r3, [r1, #12]
 8002d5a:	4605      	mov	r5, r0
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	460c      	mov	r4, r1
 8002d60:	4616      	mov	r6, r2
 8002d62:	d505      	bpl.n	8002d70 <__swrite+0x1e>
 8002d64:	2302      	movs	r3, #2
 8002d66:	2200      	movs	r2, #0
 8002d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6c:	f000 f8c8 	bl	8002f00 <_lseek_r>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	4632      	mov	r2, r6
 8002d74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d86:	f000 b8df 	b.w	8002f48 <_write_r>

08002d8a <__sseek>:
 8002d8a:	b510      	push	{r4, lr}
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d92:	f000 f8b5 	bl	8002f00 <_lseek_r>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	bf15      	itete	ne
 8002d9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002da2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002da6:	81a3      	strheq	r3, [r4, #12]
 8002da8:	bf18      	it	ne
 8002daa:	81a3      	strhne	r3, [r4, #12]
 8002dac:	bd10      	pop	{r4, pc}

08002dae <__sclose>:
 8002dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db2:	f000 b895 	b.w	8002ee0 <_close_r>

08002db6 <memset>:
 8002db6:	4603      	mov	r3, r0
 8002db8:	4402      	add	r2, r0
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d100      	bne.n	8002dc0 <memset+0xa>
 8002dbe:	4770      	bx	lr
 8002dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc4:	e7f9      	b.n	8002dba <memset+0x4>
	...

08002dc8 <strcasecmp>:
 8002dc8:	b530      	push	{r4, r5, lr}
 8002dca:	4604      	mov	r4, r0
 8002dcc:	4d0a      	ldr	r5, [pc, #40]	@ (8002df8 <strcasecmp+0x30>)
 8002dce:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002dd2:	5cea      	ldrb	r2, [r5, r3]
 8002dd4:	f002 0203 	and.w	r2, r2, #3
 8002dd8:	2a01      	cmp	r2, #1
 8002dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dde:	bf08      	it	eq
 8002de0:	3320      	addeq	r3, #32
 8002de2:	5ca8      	ldrb	r0, [r5, r2]
 8002de4:	f000 0003 	and.w	r0, r0, #3
 8002de8:	2801      	cmp	r0, #1
 8002dea:	bf08      	it	eq
 8002dec:	3220      	addeq	r2, #32
 8002dee:	1a98      	subs	r0, r3, r2
 8002df0:	d101      	bne.n	8002df6 <strcasecmp+0x2e>
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	d1eb      	bne.n	8002dce <strcasecmp+0x6>
 8002df6:	bd30      	pop	{r4, r5, pc}
 8002df8:	080045cb 	.word	0x080045cb

08002dfc <strtok>:
 8002dfc:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <strtok+0x5c>)
 8002dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e02:	681f      	ldr	r7, [r3, #0]
 8002e04:	4605      	mov	r5, r0
 8002e06:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002e08:	460e      	mov	r6, r1
 8002e0a:	b9ec      	cbnz	r4, 8002e48 <strtok+0x4c>
 8002e0c:	2050      	movs	r0, #80	@ 0x50
 8002e0e:	f000 f957 	bl	80030c0 <malloc>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6478      	str	r0, [r7, #68]	@ 0x44
 8002e16:	b920      	cbnz	r0, 8002e22 <strtok+0x26>
 8002e18:	215b      	movs	r1, #91	@ 0x5b
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <strtok+0x60>)
 8002e1c:	4810      	ldr	r0, [pc, #64]	@ (8002e60 <strtok+0x64>)
 8002e1e:	f000 f8e9 	bl	8002ff4 <__assert_func>
 8002e22:	e9c0 4400 	strd	r4, r4, [r0]
 8002e26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002e2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002e2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8002e32:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8002e36:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8002e3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8002e3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8002e42:	6184      	str	r4, [r0, #24]
 8002e44:	7704      	strb	r4, [r0, #28]
 8002e46:	6244      	str	r4, [r0, #36]	@ 0x24
 8002e48:	4631      	mov	r1, r6
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	f000 b806 	b.w	8002e64 <__strtok_r>
 8002e58:	200000a0 	.word	0x200000a0
 8002e5c:	080046cb 	.word	0x080046cb
 8002e60:	080046e2 	.word	0x080046e2

08002e64 <__strtok_r>:
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	4604      	mov	r4, r0
 8002e68:	b908      	cbnz	r0, 8002e6e <__strtok_r+0xa>
 8002e6a:	6814      	ldr	r4, [r2, #0]
 8002e6c:	b144      	cbz	r4, 8002e80 <__strtok_r+0x1c>
 8002e6e:	460f      	mov	r7, r1
 8002e70:	4620      	mov	r0, r4
 8002e72:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002e76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002e7a:	b91e      	cbnz	r6, 8002e84 <__strtok_r+0x20>
 8002e7c:	b965      	cbnz	r5, 8002e98 <__strtok_r+0x34>
 8002e7e:	6015      	str	r5, [r2, #0]
 8002e80:	2000      	movs	r0, #0
 8002e82:	e005      	b.n	8002e90 <__strtok_r+0x2c>
 8002e84:	42b5      	cmp	r5, r6
 8002e86:	d1f6      	bne.n	8002e76 <__strtok_r+0x12>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <__strtok_r+0xa>
 8002e8c:	6014      	str	r4, [r2, #0]
 8002e8e:	7003      	strb	r3, [r0, #0]
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e92:	461c      	mov	r4, r3
 8002e94:	e00c      	b.n	8002eb0 <__strtok_r+0x4c>
 8002e96:	b915      	cbnz	r5, 8002e9e <__strtok_r+0x3a>
 8002e98:	460e      	mov	r6, r1
 8002e9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002e9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002ea2:	42ab      	cmp	r3, r5
 8002ea4:	d1f7      	bne.n	8002e96 <__strtok_r+0x32>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f3      	beq.n	8002e92 <__strtok_r+0x2e>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002eb0:	6014      	str	r4, [r2, #0]
 8002eb2:	e7ed      	b.n	8002e90 <__strtok_r+0x2c>

08002eb4 <strstr>:
 8002eb4:	780a      	ldrb	r2, [r1, #0]
 8002eb6:	b570      	push	{r4, r5, r6, lr}
 8002eb8:	b96a      	cbnz	r2, 8002ed6 <strstr+0x22>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d109      	bne.n	8002ed4 <strstr+0x20>
 8002ec0:	460c      	mov	r4, r1
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f6      	beq.n	8002eba <strstr+0x6>
 8002ecc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002ed0:	429e      	cmp	r6, r3
 8002ed2:	d0f7      	beq.n	8002ec4 <strstr+0x10>
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	7803      	ldrb	r3, [r0, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ef      	bne.n	8002ebc <strstr+0x8>
 8002edc:	4618      	mov	r0, r3
 8002ede:	e7ec      	b.n	8002eba <strstr+0x6>

08002ee0 <_close_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4d05      	ldr	r5, [pc, #20]	@ (8002efc <_close_r+0x1c>)
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	602b      	str	r3, [r5, #0]
 8002eec:	f7fe f9bb 	bl	8001266 <_close>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_close_r+0x1a>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_close_r+0x1a>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000414 	.word	0x20000414

08002f00 <_lseek_r>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4d05      	ldr	r5, [pc, #20]	@ (8002f20 <_lseek_r+0x20>)
 8002f0c:	602a      	str	r2, [r5, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7fe f9cd 	bl	80012ae <_lseek>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_lseek_r+0x1e>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_lseek_r+0x1e>
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000414 	.word	0x20000414

08002f24 <_read_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4604      	mov	r4, r0
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4d05      	ldr	r5, [pc, #20]	@ (8002f44 <_read_r+0x20>)
 8002f30:	602a      	str	r2, [r5, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f7fe f95e 	bl	80011f4 <_read>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_read_r+0x1e>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_read_r+0x1e>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	20000414 	.word	0x20000414

08002f48 <_write_r>:
 8002f48:	b538      	push	{r3, r4, r5, lr}
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	2200      	movs	r2, #0
 8002f52:	4d05      	ldr	r5, [pc, #20]	@ (8002f68 <_write_r+0x20>)
 8002f54:	602a      	str	r2, [r5, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f7fe f969 	bl	800122e <_write>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d102      	bne.n	8002f66 <_write_r+0x1e>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	b103      	cbz	r3, 8002f66 <_write_r+0x1e>
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	20000414 	.word	0x20000414

08002f6c <__errno>:
 8002f6c:	4b01      	ldr	r3, [pc, #4]	@ (8002f74 <__errno+0x8>)
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	200000a0 	.word	0x200000a0

08002f78 <__libc_init_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	4d0c      	ldr	r5, [pc, #48]	@ (8002fb0 <__libc_init_array+0x38>)
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002fb4 <__libc_init_array+0x3c>)
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	42a6      	cmp	r6, r4
 8002f86:	d109      	bne.n	8002f9c <__libc_init_array+0x24>
 8002f88:	f001 f804 	bl	8003f94 <_init>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	4d0a      	ldr	r5, [pc, #40]	@ (8002fb8 <__libc_init_array+0x40>)
 8002f90:	4c0a      	ldr	r4, [pc, #40]	@ (8002fbc <__libc_init_array+0x44>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d105      	bne.n	8002fa6 <__libc_init_array+0x2e>
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa0:	4798      	blx	r3
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7ee      	b.n	8002f84 <__libc_init_array+0xc>
 8002fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002faa:	4798      	blx	r3
 8002fac:	3601      	adds	r6, #1
 8002fae:	e7f2      	b.n	8002f96 <__libc_init_array+0x1e>
 8002fb0:	080047b4 	.word	0x080047b4
 8002fb4:	080047b4 	.word	0x080047b4
 8002fb8:	080047b4 	.word	0x080047b4
 8002fbc:	080047b8 	.word	0x080047b8

08002fc0 <__retarget_lock_init_recursive>:
 8002fc0:	4770      	bx	lr

08002fc2 <__retarget_lock_acquire_recursive>:
 8002fc2:	4770      	bx	lr

08002fc4 <__retarget_lock_release_recursive>:
 8002fc4:	4770      	bx	lr

08002fc6 <strcpy>:
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fcc:	f803 2b01 	strb.w	r2, [r3], #1
 8002fd0:	2a00      	cmp	r2, #0
 8002fd2:	d1f9      	bne.n	8002fc8 <strcpy+0x2>
 8002fd4:	4770      	bx	lr

08002fd6 <memcpy>:
 8002fd6:	440a      	add	r2, r1
 8002fd8:	4291      	cmp	r1, r2
 8002fda:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fde:	d100      	bne.n	8002fe2 <memcpy+0xc>
 8002fe0:	4770      	bx	lr
 8002fe2:	b510      	push	{r4, lr}
 8002fe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe8:	4291      	cmp	r1, r2
 8002fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fee:	d1f9      	bne.n	8002fe4 <memcpy+0xe>
 8002ff0:	bd10      	pop	{r4, pc}
	...

08002ff4 <__assert_func>:
 8002ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <__assert_func+0x2c>)
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68d8      	ldr	r0, [r3, #12]
 8003002:	b954      	cbnz	r4, 800301a <__assert_func+0x26>
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <__assert_func+0x30>)
 8003006:	461c      	mov	r4, r3
 8003008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800300c:	9100      	str	r1, [sp, #0]
 800300e:	462b      	mov	r3, r5
 8003010:	4905      	ldr	r1, [pc, #20]	@ (8003028 <__assert_func+0x34>)
 8003012:	f000 fc9d 	bl	8003950 <fiprintf>
 8003016:	f000 fce5 	bl	80039e4 <abort>
 800301a:	4b04      	ldr	r3, [pc, #16]	@ (800302c <__assert_func+0x38>)
 800301c:	e7f4      	b.n	8003008 <__assert_func+0x14>
 800301e:	bf00      	nop
 8003020:	200000a0 	.word	0x200000a0
 8003024:	08004777 	.word	0x08004777
 8003028:	08004749 	.word	0x08004749
 800302c:	0800473c 	.word	0x0800473c

08003030 <_free_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	4605      	mov	r5, r0
 8003034:	2900      	cmp	r1, #0
 8003036:	d040      	beq.n	80030ba <_free_r+0x8a>
 8003038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800303c:	1f0c      	subs	r4, r1, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	bfb8      	it	lt
 8003042:	18e4      	addlt	r4, r4, r3
 8003044:	f000 f8e6 	bl	8003214 <__malloc_lock>
 8003048:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <_free_r+0x8c>)
 800304a:	6813      	ldr	r3, [r2, #0]
 800304c:	b933      	cbnz	r3, 800305c <_free_r+0x2c>
 800304e:	6063      	str	r3, [r4, #4]
 8003050:	6014      	str	r4, [r2, #0]
 8003052:	4628      	mov	r0, r5
 8003054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003058:	f000 b8e2 	b.w	8003220 <__malloc_unlock>
 800305c:	42a3      	cmp	r3, r4
 800305e:	d908      	bls.n	8003072 <_free_r+0x42>
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	1821      	adds	r1, r4, r0
 8003064:	428b      	cmp	r3, r1
 8003066:	bf01      	itttt	eq
 8003068:	6819      	ldreq	r1, [r3, #0]
 800306a:	685b      	ldreq	r3, [r3, #4]
 800306c:	1809      	addeq	r1, r1, r0
 800306e:	6021      	streq	r1, [r4, #0]
 8003070:	e7ed      	b.n	800304e <_free_r+0x1e>
 8003072:	461a      	mov	r2, r3
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b10b      	cbz	r3, 800307c <_free_r+0x4c>
 8003078:	42a3      	cmp	r3, r4
 800307a:	d9fa      	bls.n	8003072 <_free_r+0x42>
 800307c:	6811      	ldr	r1, [r2, #0]
 800307e:	1850      	adds	r0, r2, r1
 8003080:	42a0      	cmp	r0, r4
 8003082:	d10b      	bne.n	800309c <_free_r+0x6c>
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	4401      	add	r1, r0
 8003088:	1850      	adds	r0, r2, r1
 800308a:	4283      	cmp	r3, r0
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	d1e0      	bne.n	8003052 <_free_r+0x22>
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4408      	add	r0, r1
 8003096:	6010      	str	r0, [r2, #0]
 8003098:	6053      	str	r3, [r2, #4]
 800309a:	e7da      	b.n	8003052 <_free_r+0x22>
 800309c:	d902      	bls.n	80030a4 <_free_r+0x74>
 800309e:	230c      	movs	r3, #12
 80030a0:	602b      	str	r3, [r5, #0]
 80030a2:	e7d6      	b.n	8003052 <_free_r+0x22>
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	1821      	adds	r1, r4, r0
 80030a8:	428b      	cmp	r3, r1
 80030aa:	bf01      	itttt	eq
 80030ac:	6819      	ldreq	r1, [r3, #0]
 80030ae:	685b      	ldreq	r3, [r3, #4]
 80030b0:	1809      	addeq	r1, r1, r0
 80030b2:	6021      	streq	r1, [r4, #0]
 80030b4:	6063      	str	r3, [r4, #4]
 80030b6:	6054      	str	r4, [r2, #4]
 80030b8:	e7cb      	b.n	8003052 <_free_r+0x22>
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	20000420 	.word	0x20000420

080030c0 <malloc>:
 80030c0:	4b02      	ldr	r3, [pc, #8]	@ (80030cc <malloc+0xc>)
 80030c2:	4601      	mov	r1, r0
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	f000 b825 	b.w	8003114 <_malloc_r>
 80030ca:	bf00      	nop
 80030cc:	200000a0 	.word	0x200000a0

080030d0 <sbrk_aligned>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003110 <sbrk_aligned+0x40>)
 80030d4:	460c      	mov	r4, r1
 80030d6:	6831      	ldr	r1, [r6, #0]
 80030d8:	4605      	mov	r5, r0
 80030da:	b911      	cbnz	r1, 80030e2 <sbrk_aligned+0x12>
 80030dc:	f000 fc64 	bl	80039a8 <_sbrk_r>
 80030e0:	6030      	str	r0, [r6, #0]
 80030e2:	4621      	mov	r1, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 fc5f 	bl	80039a8 <_sbrk_r>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	d103      	bne.n	80030f6 <sbrk_aligned+0x26>
 80030ee:	f04f 34ff 	mov.w	r4, #4294967295
 80030f2:	4620      	mov	r0, r4
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
 80030f6:	1cc4      	adds	r4, r0, #3
 80030f8:	f024 0403 	bic.w	r4, r4, #3
 80030fc:	42a0      	cmp	r0, r4
 80030fe:	d0f8      	beq.n	80030f2 <sbrk_aligned+0x22>
 8003100:	1a21      	subs	r1, r4, r0
 8003102:	4628      	mov	r0, r5
 8003104:	f000 fc50 	bl	80039a8 <_sbrk_r>
 8003108:	3001      	adds	r0, #1
 800310a:	d1f2      	bne.n	80030f2 <sbrk_aligned+0x22>
 800310c:	e7ef      	b.n	80030ee <sbrk_aligned+0x1e>
 800310e:	bf00      	nop
 8003110:	2000041c 	.word	0x2000041c

08003114 <_malloc_r>:
 8003114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003118:	1ccd      	adds	r5, r1, #3
 800311a:	f025 0503 	bic.w	r5, r5, #3
 800311e:	3508      	adds	r5, #8
 8003120:	2d0c      	cmp	r5, #12
 8003122:	bf38      	it	cc
 8003124:	250c      	movcc	r5, #12
 8003126:	2d00      	cmp	r5, #0
 8003128:	4606      	mov	r6, r0
 800312a:	db01      	blt.n	8003130 <_malloc_r+0x1c>
 800312c:	42a9      	cmp	r1, r5
 800312e:	d904      	bls.n	800313a <_malloc_r+0x26>
 8003130:	230c      	movs	r3, #12
 8003132:	6033      	str	r3, [r6, #0]
 8003134:	2000      	movs	r0, #0
 8003136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003210 <_malloc_r+0xfc>
 800313e:	f000 f869 	bl	8003214 <__malloc_lock>
 8003142:	f8d8 3000 	ldr.w	r3, [r8]
 8003146:	461c      	mov	r4, r3
 8003148:	bb44      	cbnz	r4, 800319c <_malloc_r+0x88>
 800314a:	4629      	mov	r1, r5
 800314c:	4630      	mov	r0, r6
 800314e:	f7ff ffbf 	bl	80030d0 <sbrk_aligned>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	4604      	mov	r4, r0
 8003156:	d158      	bne.n	800320a <_malloc_r+0xf6>
 8003158:	f8d8 4000 	ldr.w	r4, [r8]
 800315c:	4627      	mov	r7, r4
 800315e:	2f00      	cmp	r7, #0
 8003160:	d143      	bne.n	80031ea <_malloc_r+0xd6>
 8003162:	2c00      	cmp	r4, #0
 8003164:	d04b      	beq.n	80031fe <_malloc_r+0xea>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	4639      	mov	r1, r7
 800316a:	4630      	mov	r0, r6
 800316c:	eb04 0903 	add.w	r9, r4, r3
 8003170:	f000 fc1a 	bl	80039a8 <_sbrk_r>
 8003174:	4581      	cmp	r9, r0
 8003176:	d142      	bne.n	80031fe <_malloc_r+0xea>
 8003178:	6821      	ldr	r1, [r4, #0]
 800317a:	4630      	mov	r0, r6
 800317c:	1a6d      	subs	r5, r5, r1
 800317e:	4629      	mov	r1, r5
 8003180:	f7ff ffa6 	bl	80030d0 <sbrk_aligned>
 8003184:	3001      	adds	r0, #1
 8003186:	d03a      	beq.n	80031fe <_malloc_r+0xea>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	442b      	add	r3, r5
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	f8d8 3000 	ldr.w	r3, [r8]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	bb62      	cbnz	r2, 80031f0 <_malloc_r+0xdc>
 8003196:	f8c8 7000 	str.w	r7, [r8]
 800319a:	e00f      	b.n	80031bc <_malloc_r+0xa8>
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	1b52      	subs	r2, r2, r5
 80031a0:	d420      	bmi.n	80031e4 <_malloc_r+0xd0>
 80031a2:	2a0b      	cmp	r2, #11
 80031a4:	d917      	bls.n	80031d6 <_malloc_r+0xc2>
 80031a6:	1961      	adds	r1, r4, r5
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	6025      	str	r5, [r4, #0]
 80031ac:	bf18      	it	ne
 80031ae:	6059      	strne	r1, [r3, #4]
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	bf08      	it	eq
 80031b4:	f8c8 1000 	streq.w	r1, [r8]
 80031b8:	5162      	str	r2, [r4, r5]
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	4630      	mov	r0, r6
 80031be:	f000 f82f 	bl	8003220 <__malloc_unlock>
 80031c2:	f104 000b 	add.w	r0, r4, #11
 80031c6:	1d23      	adds	r3, r4, #4
 80031c8:	f020 0007 	bic.w	r0, r0, #7
 80031cc:	1ac2      	subs	r2, r0, r3
 80031ce:	bf1c      	itt	ne
 80031d0:	1a1b      	subne	r3, r3, r0
 80031d2:	50a3      	strne	r3, [r4, r2]
 80031d4:	e7af      	b.n	8003136 <_malloc_r+0x22>
 80031d6:	6862      	ldr	r2, [r4, #4]
 80031d8:	42a3      	cmp	r3, r4
 80031da:	bf0c      	ite	eq
 80031dc:	f8c8 2000 	streq.w	r2, [r8]
 80031e0:	605a      	strne	r2, [r3, #4]
 80031e2:	e7eb      	b.n	80031bc <_malloc_r+0xa8>
 80031e4:	4623      	mov	r3, r4
 80031e6:	6864      	ldr	r4, [r4, #4]
 80031e8:	e7ae      	b.n	8003148 <_malloc_r+0x34>
 80031ea:	463c      	mov	r4, r7
 80031ec:	687f      	ldr	r7, [r7, #4]
 80031ee:	e7b6      	b.n	800315e <_malloc_r+0x4a>
 80031f0:	461a      	mov	r2, r3
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d1fb      	bne.n	80031f0 <_malloc_r+0xdc>
 80031f8:	2300      	movs	r3, #0
 80031fa:	6053      	str	r3, [r2, #4]
 80031fc:	e7de      	b.n	80031bc <_malloc_r+0xa8>
 80031fe:	230c      	movs	r3, #12
 8003200:	4630      	mov	r0, r6
 8003202:	6033      	str	r3, [r6, #0]
 8003204:	f000 f80c 	bl	8003220 <__malloc_unlock>
 8003208:	e794      	b.n	8003134 <_malloc_r+0x20>
 800320a:	6005      	str	r5, [r0, #0]
 800320c:	e7d6      	b.n	80031bc <_malloc_r+0xa8>
 800320e:	bf00      	nop
 8003210:	20000420 	.word	0x20000420

08003214 <__malloc_lock>:
 8003214:	4801      	ldr	r0, [pc, #4]	@ (800321c <__malloc_lock+0x8>)
 8003216:	f7ff bed4 	b.w	8002fc2 <__retarget_lock_acquire_recursive>
 800321a:	bf00      	nop
 800321c:	20000418 	.word	0x20000418

08003220 <__malloc_unlock>:
 8003220:	4801      	ldr	r0, [pc, #4]	@ (8003228 <__malloc_unlock+0x8>)
 8003222:	f7ff becf 	b.w	8002fc4 <__retarget_lock_release_recursive>
 8003226:	bf00      	nop
 8003228:	20000418 	.word	0x20000418

0800322c <__ssputs_r>:
 800322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	461f      	mov	r7, r3
 8003232:	688e      	ldr	r6, [r1, #8]
 8003234:	4682      	mov	sl, r0
 8003236:	42be      	cmp	r6, r7
 8003238:	460c      	mov	r4, r1
 800323a:	4690      	mov	r8, r2
 800323c:	680b      	ldr	r3, [r1, #0]
 800323e:	d82d      	bhi.n	800329c <__ssputs_r+0x70>
 8003240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003248:	d026      	beq.n	8003298 <__ssputs_r+0x6c>
 800324a:	6965      	ldr	r5, [r4, #20]
 800324c:	6909      	ldr	r1, [r1, #16]
 800324e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003252:	eba3 0901 	sub.w	r9, r3, r1
 8003256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800325a:	1c7b      	adds	r3, r7, #1
 800325c:	444b      	add	r3, r9
 800325e:	106d      	asrs	r5, r5, #1
 8003260:	429d      	cmp	r5, r3
 8003262:	bf38      	it	cc
 8003264:	461d      	movcc	r5, r3
 8003266:	0553      	lsls	r3, r2, #21
 8003268:	d527      	bpl.n	80032ba <__ssputs_r+0x8e>
 800326a:	4629      	mov	r1, r5
 800326c:	f7ff ff52 	bl	8003114 <_malloc_r>
 8003270:	4606      	mov	r6, r0
 8003272:	b360      	cbz	r0, 80032ce <__ssputs_r+0xa2>
 8003274:	464a      	mov	r2, r9
 8003276:	6921      	ldr	r1, [r4, #16]
 8003278:	f7ff fead 	bl	8002fd6 <memcpy>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003286:	81a3      	strh	r3, [r4, #12]
 8003288:	6126      	str	r6, [r4, #16]
 800328a:	444e      	add	r6, r9
 800328c:	6026      	str	r6, [r4, #0]
 800328e:	463e      	mov	r6, r7
 8003290:	6165      	str	r5, [r4, #20]
 8003292:	eba5 0509 	sub.w	r5, r5, r9
 8003296:	60a5      	str	r5, [r4, #8]
 8003298:	42be      	cmp	r6, r7
 800329a:	d900      	bls.n	800329e <__ssputs_r+0x72>
 800329c:	463e      	mov	r6, r7
 800329e:	4632      	mov	r2, r6
 80032a0:	4641      	mov	r1, r8
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	f000 fb66 	bl	8003974 <memmove>
 80032a8:	2000      	movs	r0, #0
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	1b9b      	subs	r3, r3, r6
 80032ae:	60a3      	str	r3, [r4, #8]
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	4433      	add	r3, r6
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ba:	462a      	mov	r2, r5
 80032bc:	f000 fb99 	bl	80039f2 <_realloc_r>
 80032c0:	4606      	mov	r6, r0
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d1e0      	bne.n	8003288 <__ssputs_r+0x5c>
 80032c6:	4650      	mov	r0, sl
 80032c8:	6921      	ldr	r1, [r4, #16]
 80032ca:	f7ff feb1 	bl	8003030 <_free_r>
 80032ce:	230c      	movs	r3, #12
 80032d0:	f8ca 3000 	str.w	r3, [sl]
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	e7e9      	b.n	80032b6 <__ssputs_r+0x8a>
	...

080032e4 <_svfiprintf_r>:
 80032e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e8:	4698      	mov	r8, r3
 80032ea:	898b      	ldrh	r3, [r1, #12]
 80032ec:	4607      	mov	r7, r0
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	460d      	mov	r5, r1
 80032f2:	4614      	mov	r4, r2
 80032f4:	b09d      	sub	sp, #116	@ 0x74
 80032f6:	d510      	bpl.n	800331a <_svfiprintf_r+0x36>
 80032f8:	690b      	ldr	r3, [r1, #16]
 80032fa:	b973      	cbnz	r3, 800331a <_svfiprintf_r+0x36>
 80032fc:	2140      	movs	r1, #64	@ 0x40
 80032fe:	f7ff ff09 	bl	8003114 <_malloc_r>
 8003302:	6028      	str	r0, [r5, #0]
 8003304:	6128      	str	r0, [r5, #16]
 8003306:	b930      	cbnz	r0, 8003316 <_svfiprintf_r+0x32>
 8003308:	230c      	movs	r3, #12
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	b01d      	add	sp, #116	@ 0x74
 8003312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003316:	2340      	movs	r3, #64	@ 0x40
 8003318:	616b      	str	r3, [r5, #20]
 800331a:	2300      	movs	r3, #0
 800331c:	9309      	str	r3, [sp, #36]	@ 0x24
 800331e:	2320      	movs	r3, #32
 8003320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003324:	2330      	movs	r3, #48	@ 0x30
 8003326:	f04f 0901 	mov.w	r9, #1
 800332a:	f8cd 800c 	str.w	r8, [sp, #12]
 800332e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80034c8 <_svfiprintf_r+0x1e4>
 8003332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003336:	4623      	mov	r3, r4
 8003338:	469a      	mov	sl, r3
 800333a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800333e:	b10a      	cbz	r2, 8003344 <_svfiprintf_r+0x60>
 8003340:	2a25      	cmp	r2, #37	@ 0x25
 8003342:	d1f9      	bne.n	8003338 <_svfiprintf_r+0x54>
 8003344:	ebba 0b04 	subs.w	fp, sl, r4
 8003348:	d00b      	beq.n	8003362 <_svfiprintf_r+0x7e>
 800334a:	465b      	mov	r3, fp
 800334c:	4622      	mov	r2, r4
 800334e:	4629      	mov	r1, r5
 8003350:	4638      	mov	r0, r7
 8003352:	f7ff ff6b 	bl	800322c <__ssputs_r>
 8003356:	3001      	adds	r0, #1
 8003358:	f000 80a7 	beq.w	80034aa <_svfiprintf_r+0x1c6>
 800335c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800335e:	445a      	add	r2, fp
 8003360:	9209      	str	r2, [sp, #36]	@ 0x24
 8003362:	f89a 3000 	ldrb.w	r3, [sl]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 809f 	beq.w	80034aa <_svfiprintf_r+0x1c6>
 800336c:	2300      	movs	r3, #0
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003376:	f10a 0a01 	add.w	sl, sl, #1
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	9307      	str	r3, [sp, #28]
 800337e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003382:	931a      	str	r3, [sp, #104]	@ 0x68
 8003384:	4654      	mov	r4, sl
 8003386:	2205      	movs	r2, #5
 8003388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800338c:	484e      	ldr	r0, [pc, #312]	@ (80034c8 <_svfiprintf_r+0x1e4>)
 800338e:	f000 fb1b 	bl	80039c8 <memchr>
 8003392:	9a04      	ldr	r2, [sp, #16]
 8003394:	b9d8      	cbnz	r0, 80033ce <_svfiprintf_r+0xea>
 8003396:	06d0      	lsls	r0, r2, #27
 8003398:	bf44      	itt	mi
 800339a:	2320      	movmi	r3, #32
 800339c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033a0:	0711      	lsls	r1, r2, #28
 80033a2:	bf44      	itt	mi
 80033a4:	232b      	movmi	r3, #43	@ 0x2b
 80033a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033aa:	f89a 3000 	ldrb.w	r3, [sl]
 80033ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80033b0:	d015      	beq.n	80033de <_svfiprintf_r+0xfa>
 80033b2:	4654      	mov	r4, sl
 80033b4:	2000      	movs	r0, #0
 80033b6:	f04f 0c0a 	mov.w	ip, #10
 80033ba:	9a07      	ldr	r2, [sp, #28]
 80033bc:	4621      	mov	r1, r4
 80033be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033c2:	3b30      	subs	r3, #48	@ 0x30
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	d94b      	bls.n	8003460 <_svfiprintf_r+0x17c>
 80033c8:	b1b0      	cbz	r0, 80033f8 <_svfiprintf_r+0x114>
 80033ca:	9207      	str	r2, [sp, #28]
 80033cc:	e014      	b.n	80033f8 <_svfiprintf_r+0x114>
 80033ce:	eba0 0308 	sub.w	r3, r0, r8
 80033d2:	fa09 f303 	lsl.w	r3, r9, r3
 80033d6:	4313      	orrs	r3, r2
 80033d8:	46a2      	mov	sl, r4
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	e7d2      	b.n	8003384 <_svfiprintf_r+0xa0>
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	1d19      	adds	r1, r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	9103      	str	r1, [sp, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfbb      	ittet	lt
 80033ea:	425b      	neglt	r3, r3
 80033ec:	f042 0202 	orrlt.w	r2, r2, #2
 80033f0:	9307      	strge	r3, [sp, #28]
 80033f2:	9307      	strlt	r3, [sp, #28]
 80033f4:	bfb8      	it	lt
 80033f6:	9204      	strlt	r2, [sp, #16]
 80033f8:	7823      	ldrb	r3, [r4, #0]
 80033fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80033fc:	d10a      	bne.n	8003414 <_svfiprintf_r+0x130>
 80033fe:	7863      	ldrb	r3, [r4, #1]
 8003400:	2b2a      	cmp	r3, #42	@ 0x2a
 8003402:	d132      	bne.n	800346a <_svfiprintf_r+0x186>
 8003404:	9b03      	ldr	r3, [sp, #12]
 8003406:	3402      	adds	r4, #2
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	9203      	str	r2, [sp, #12]
 800340e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003412:	9305      	str	r3, [sp, #20]
 8003414:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80034cc <_svfiprintf_r+0x1e8>
 8003418:	2203      	movs	r2, #3
 800341a:	4650      	mov	r0, sl
 800341c:	7821      	ldrb	r1, [r4, #0]
 800341e:	f000 fad3 	bl	80039c8 <memchr>
 8003422:	b138      	cbz	r0, 8003434 <_svfiprintf_r+0x150>
 8003424:	2240      	movs	r2, #64	@ 0x40
 8003426:	9b04      	ldr	r3, [sp, #16]
 8003428:	eba0 000a 	sub.w	r0, r0, sl
 800342c:	4082      	lsls	r2, r0
 800342e:	4313      	orrs	r3, r2
 8003430:	3401      	adds	r4, #1
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003438:	2206      	movs	r2, #6
 800343a:	4825      	ldr	r0, [pc, #148]	@ (80034d0 <_svfiprintf_r+0x1ec>)
 800343c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003440:	f000 fac2 	bl	80039c8 <memchr>
 8003444:	2800      	cmp	r0, #0
 8003446:	d036      	beq.n	80034b6 <_svfiprintf_r+0x1d2>
 8003448:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <_svfiprintf_r+0x1f0>)
 800344a:	bb1b      	cbnz	r3, 8003494 <_svfiprintf_r+0x1b0>
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	3307      	adds	r3, #7
 8003450:	f023 0307 	bic.w	r3, r3, #7
 8003454:	3308      	adds	r3, #8
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800345a:	4433      	add	r3, r6
 800345c:	9309      	str	r3, [sp, #36]	@ 0x24
 800345e:	e76a      	b.n	8003336 <_svfiprintf_r+0x52>
 8003460:	460c      	mov	r4, r1
 8003462:	2001      	movs	r0, #1
 8003464:	fb0c 3202 	mla	r2, ip, r2, r3
 8003468:	e7a8      	b.n	80033bc <_svfiprintf_r+0xd8>
 800346a:	2300      	movs	r3, #0
 800346c:	f04f 0c0a 	mov.w	ip, #10
 8003470:	4619      	mov	r1, r3
 8003472:	3401      	adds	r4, #1
 8003474:	9305      	str	r3, [sp, #20]
 8003476:	4620      	mov	r0, r4
 8003478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800347c:	3a30      	subs	r2, #48	@ 0x30
 800347e:	2a09      	cmp	r2, #9
 8003480:	d903      	bls.n	800348a <_svfiprintf_r+0x1a6>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0c6      	beq.n	8003414 <_svfiprintf_r+0x130>
 8003486:	9105      	str	r1, [sp, #20]
 8003488:	e7c4      	b.n	8003414 <_svfiprintf_r+0x130>
 800348a:	4604      	mov	r4, r0
 800348c:	2301      	movs	r3, #1
 800348e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003492:	e7f0      	b.n	8003476 <_svfiprintf_r+0x192>
 8003494:	ab03      	add	r3, sp, #12
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	462a      	mov	r2, r5
 800349a:	4638      	mov	r0, r7
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <_svfiprintf_r+0x1f4>)
 800349e:	a904      	add	r1, sp, #16
 80034a0:	f3af 8000 	nop.w
 80034a4:	1c42      	adds	r2, r0, #1
 80034a6:	4606      	mov	r6, r0
 80034a8:	d1d6      	bne.n	8003458 <_svfiprintf_r+0x174>
 80034aa:	89ab      	ldrh	r3, [r5, #12]
 80034ac:	065b      	lsls	r3, r3, #25
 80034ae:	f53f af2d 	bmi.w	800330c <_svfiprintf_r+0x28>
 80034b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034b4:	e72c      	b.n	8003310 <_svfiprintf_r+0x2c>
 80034b6:	ab03      	add	r3, sp, #12
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	462a      	mov	r2, r5
 80034bc:	4638      	mov	r0, r7
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <_svfiprintf_r+0x1f4>)
 80034c0:	a904      	add	r1, sp, #16
 80034c2:	f000 f87d 	bl	80035c0 <_printf_i>
 80034c6:	e7ed      	b.n	80034a4 <_svfiprintf_r+0x1c0>
 80034c8:	08004778 	.word	0x08004778
 80034cc:	0800477e 	.word	0x0800477e
 80034d0:	08004782 	.word	0x08004782
 80034d4:	00000000 	.word	0x00000000
 80034d8:	0800322d 	.word	0x0800322d

080034dc <_printf_common>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	4616      	mov	r6, r2
 80034e2:	4698      	mov	r8, r3
 80034e4:	688a      	ldr	r2, [r1, #8]
 80034e6:	690b      	ldr	r3, [r1, #16]
 80034e8:	4607      	mov	r7, r0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfb8      	it	lt
 80034ee:	4613      	movlt	r3, r2
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034f6:	460c      	mov	r4, r1
 80034f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034fc:	b10a      	cbz	r2, 8003502 <_printf_common+0x26>
 80034fe:	3301      	adds	r3, #1
 8003500:	6033      	str	r3, [r6, #0]
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	0699      	lsls	r1, r3, #26
 8003506:	bf42      	ittt	mi
 8003508:	6833      	ldrmi	r3, [r6, #0]
 800350a:	3302      	addmi	r3, #2
 800350c:	6033      	strmi	r3, [r6, #0]
 800350e:	6825      	ldr	r5, [r4, #0]
 8003510:	f015 0506 	ands.w	r5, r5, #6
 8003514:	d106      	bne.n	8003524 <_printf_common+0x48>
 8003516:	f104 0a19 	add.w	sl, r4, #25
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	6832      	ldr	r2, [r6, #0]
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	42ab      	cmp	r3, r5
 8003522:	dc2b      	bgt.n	800357c <_printf_common+0xa0>
 8003524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	3b00      	subs	r3, #0
 800352c:	bf18      	it	ne
 800352e:	2301      	movne	r3, #1
 8003530:	0692      	lsls	r2, r2, #26
 8003532:	d430      	bmi.n	8003596 <_printf_common+0xba>
 8003534:	4641      	mov	r1, r8
 8003536:	4638      	mov	r0, r7
 8003538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800353c:	47c8      	blx	r9
 800353e:	3001      	adds	r0, #1
 8003540:	d023      	beq.n	800358a <_printf_common+0xae>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	f003 0306 	and.w	r3, r3, #6
 800354a:	2b04      	cmp	r3, #4
 800354c:	bf14      	ite	ne
 800354e:	2500      	movne	r5, #0
 8003550:	6833      	ldreq	r3, [r6, #0]
 8003552:	f04f 0600 	mov.w	r6, #0
 8003556:	bf08      	it	eq
 8003558:	68e5      	ldreq	r5, [r4, #12]
 800355a:	f104 041a 	add.w	r4, r4, #26
 800355e:	bf08      	it	eq
 8003560:	1aed      	subeq	r5, r5, r3
 8003562:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003566:	bf08      	it	eq
 8003568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800356c:	4293      	cmp	r3, r2
 800356e:	bfc4      	itt	gt
 8003570:	1a9b      	subgt	r3, r3, r2
 8003572:	18ed      	addgt	r5, r5, r3
 8003574:	42b5      	cmp	r5, r6
 8003576:	d11a      	bne.n	80035ae <_printf_common+0xd2>
 8003578:	2000      	movs	r0, #0
 800357a:	e008      	b.n	800358e <_printf_common+0xb2>
 800357c:	2301      	movs	r3, #1
 800357e:	4652      	mov	r2, sl
 8003580:	4641      	mov	r1, r8
 8003582:	4638      	mov	r0, r7
 8003584:	47c8      	blx	r9
 8003586:	3001      	adds	r0, #1
 8003588:	d103      	bne.n	8003592 <_printf_common+0xb6>
 800358a:	f04f 30ff 	mov.w	r0, #4294967295
 800358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003592:	3501      	adds	r5, #1
 8003594:	e7c1      	b.n	800351a <_printf_common+0x3e>
 8003596:	2030      	movs	r0, #48	@ 0x30
 8003598:	18e1      	adds	r1, r4, r3
 800359a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035a4:	4422      	add	r2, r4
 80035a6:	3302      	adds	r3, #2
 80035a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035ac:	e7c2      	b.n	8003534 <_printf_common+0x58>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4622      	mov	r2, r4
 80035b2:	4641      	mov	r1, r8
 80035b4:	4638      	mov	r0, r7
 80035b6:	47c8      	blx	r9
 80035b8:	3001      	adds	r0, #1
 80035ba:	d0e6      	beq.n	800358a <_printf_common+0xae>
 80035bc:	3601      	adds	r6, #1
 80035be:	e7d9      	b.n	8003574 <_printf_common+0x98>

080035c0 <_printf_i>:
 80035c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	7e0f      	ldrb	r7, [r1, #24]
 80035c6:	4691      	mov	r9, r2
 80035c8:	2f78      	cmp	r7, #120	@ 0x78
 80035ca:	4680      	mov	r8, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	469a      	mov	sl, r3
 80035d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035d6:	d807      	bhi.n	80035e8 <_printf_i+0x28>
 80035d8:	2f62      	cmp	r7, #98	@ 0x62
 80035da:	d80a      	bhi.n	80035f2 <_printf_i+0x32>
 80035dc:	2f00      	cmp	r7, #0
 80035de:	f000 80d3 	beq.w	8003788 <_printf_i+0x1c8>
 80035e2:	2f58      	cmp	r7, #88	@ 0x58
 80035e4:	f000 80ba 	beq.w	800375c <_printf_i+0x19c>
 80035e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035f0:	e03a      	b.n	8003668 <_printf_i+0xa8>
 80035f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035f6:	2b15      	cmp	r3, #21
 80035f8:	d8f6      	bhi.n	80035e8 <_printf_i+0x28>
 80035fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003600 <_printf_i+0x40>)
 80035fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003600:	08003659 	.word	0x08003659
 8003604:	0800366d 	.word	0x0800366d
 8003608:	080035e9 	.word	0x080035e9
 800360c:	080035e9 	.word	0x080035e9
 8003610:	080035e9 	.word	0x080035e9
 8003614:	080035e9 	.word	0x080035e9
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080035e9 	.word	0x080035e9
 8003620:	080035e9 	.word	0x080035e9
 8003624:	080035e9 	.word	0x080035e9
 8003628:	080035e9 	.word	0x080035e9
 800362c:	0800376f 	.word	0x0800376f
 8003630:	08003697 	.word	0x08003697
 8003634:	08003729 	.word	0x08003729
 8003638:	080035e9 	.word	0x080035e9
 800363c:	080035e9 	.word	0x080035e9
 8003640:	08003791 	.word	0x08003791
 8003644:	080035e9 	.word	0x080035e9
 8003648:	08003697 	.word	0x08003697
 800364c:	080035e9 	.word	0x080035e9
 8003650:	080035e9 	.word	0x080035e9
 8003654:	08003731 	.word	0x08003731
 8003658:	6833      	ldr	r3, [r6, #0]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6032      	str	r2, [r6, #0]
 8003660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003668:	2301      	movs	r3, #1
 800366a:	e09e      	b.n	80037aa <_printf_i+0x1ea>
 800366c:	6833      	ldr	r3, [r6, #0]
 800366e:	6820      	ldr	r0, [r4, #0]
 8003670:	1d19      	adds	r1, r3, #4
 8003672:	6031      	str	r1, [r6, #0]
 8003674:	0606      	lsls	r6, r0, #24
 8003676:	d501      	bpl.n	800367c <_printf_i+0xbc>
 8003678:	681d      	ldr	r5, [r3, #0]
 800367a:	e003      	b.n	8003684 <_printf_i+0xc4>
 800367c:	0645      	lsls	r5, r0, #25
 800367e:	d5fb      	bpl.n	8003678 <_printf_i+0xb8>
 8003680:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003684:	2d00      	cmp	r5, #0
 8003686:	da03      	bge.n	8003690 <_printf_i+0xd0>
 8003688:	232d      	movs	r3, #45	@ 0x2d
 800368a:	426d      	negs	r5, r5
 800368c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003690:	230a      	movs	r3, #10
 8003692:	4859      	ldr	r0, [pc, #356]	@ (80037f8 <_printf_i+0x238>)
 8003694:	e011      	b.n	80036ba <_printf_i+0xfa>
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	6833      	ldr	r3, [r6, #0]
 800369a:	0608      	lsls	r0, r1, #24
 800369c:	f853 5b04 	ldr.w	r5, [r3], #4
 80036a0:	d402      	bmi.n	80036a8 <_printf_i+0xe8>
 80036a2:	0649      	lsls	r1, r1, #25
 80036a4:	bf48      	it	mi
 80036a6:	b2ad      	uxthmi	r5, r5
 80036a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036aa:	6033      	str	r3, [r6, #0]
 80036ac:	bf14      	ite	ne
 80036ae:	230a      	movne	r3, #10
 80036b0:	2308      	moveq	r3, #8
 80036b2:	4851      	ldr	r0, [pc, #324]	@ (80037f8 <_printf_i+0x238>)
 80036b4:	2100      	movs	r1, #0
 80036b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036ba:	6866      	ldr	r6, [r4, #4]
 80036bc:	2e00      	cmp	r6, #0
 80036be:	bfa8      	it	ge
 80036c0:	6821      	ldrge	r1, [r4, #0]
 80036c2:	60a6      	str	r6, [r4, #8]
 80036c4:	bfa4      	itt	ge
 80036c6:	f021 0104 	bicge.w	r1, r1, #4
 80036ca:	6021      	strge	r1, [r4, #0]
 80036cc:	b90d      	cbnz	r5, 80036d2 <_printf_i+0x112>
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d04b      	beq.n	800376a <_printf_i+0x1aa>
 80036d2:	4616      	mov	r6, r2
 80036d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80036d8:	fb03 5711 	mls	r7, r3, r1, r5
 80036dc:	5dc7      	ldrb	r7, [r0, r7]
 80036de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036e2:	462f      	mov	r7, r5
 80036e4:	42bb      	cmp	r3, r7
 80036e6:	460d      	mov	r5, r1
 80036e8:	d9f4      	bls.n	80036d4 <_printf_i+0x114>
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d10b      	bne.n	8003706 <_printf_i+0x146>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	07df      	lsls	r7, r3, #31
 80036f2:	d508      	bpl.n	8003706 <_printf_i+0x146>
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	6861      	ldr	r1, [r4, #4]
 80036f8:	4299      	cmp	r1, r3
 80036fa:	bfde      	ittt	le
 80036fc:	2330      	movle	r3, #48	@ 0x30
 80036fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003702:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003706:	1b92      	subs	r2, r2, r6
 8003708:	6122      	str	r2, [r4, #16]
 800370a:	464b      	mov	r3, r9
 800370c:	4621      	mov	r1, r4
 800370e:	4640      	mov	r0, r8
 8003710:	f8cd a000 	str.w	sl, [sp]
 8003714:	aa03      	add	r2, sp, #12
 8003716:	f7ff fee1 	bl	80034dc <_printf_common>
 800371a:	3001      	adds	r0, #1
 800371c:	d14a      	bne.n	80037b4 <_printf_i+0x1f4>
 800371e:	f04f 30ff 	mov.w	r0, #4294967295
 8003722:	b004      	add	sp, #16
 8003724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	f043 0320 	orr.w	r3, r3, #32
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	2778      	movs	r7, #120	@ 0x78
 8003732:	4832      	ldr	r0, [pc, #200]	@ (80037fc <_printf_i+0x23c>)
 8003734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	6831      	ldr	r1, [r6, #0]
 800373c:	061f      	lsls	r7, r3, #24
 800373e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003742:	d402      	bmi.n	800374a <_printf_i+0x18a>
 8003744:	065f      	lsls	r7, r3, #25
 8003746:	bf48      	it	mi
 8003748:	b2ad      	uxthmi	r5, r5
 800374a:	6031      	str	r1, [r6, #0]
 800374c:	07d9      	lsls	r1, r3, #31
 800374e:	bf44      	itt	mi
 8003750:	f043 0320 	orrmi.w	r3, r3, #32
 8003754:	6023      	strmi	r3, [r4, #0]
 8003756:	b11d      	cbz	r5, 8003760 <_printf_i+0x1a0>
 8003758:	2310      	movs	r3, #16
 800375a:	e7ab      	b.n	80036b4 <_printf_i+0xf4>
 800375c:	4826      	ldr	r0, [pc, #152]	@ (80037f8 <_printf_i+0x238>)
 800375e:	e7e9      	b.n	8003734 <_printf_i+0x174>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	e7f6      	b.n	8003758 <_printf_i+0x198>
 800376a:	4616      	mov	r6, r2
 800376c:	e7bd      	b.n	80036ea <_printf_i+0x12a>
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	6825      	ldr	r5, [r4, #0]
 8003772:	1d18      	adds	r0, r3, #4
 8003774:	6961      	ldr	r1, [r4, #20]
 8003776:	6030      	str	r0, [r6, #0]
 8003778:	062e      	lsls	r6, r5, #24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	d501      	bpl.n	8003782 <_printf_i+0x1c2>
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	e002      	b.n	8003788 <_printf_i+0x1c8>
 8003782:	0668      	lsls	r0, r5, #25
 8003784:	d5fb      	bpl.n	800377e <_printf_i+0x1be>
 8003786:	8019      	strh	r1, [r3, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	4616      	mov	r6, r2
 800378c:	6123      	str	r3, [r4, #16]
 800378e:	e7bc      	b.n	800370a <_printf_i+0x14a>
 8003790:	6833      	ldr	r3, [r6, #0]
 8003792:	2100      	movs	r1, #0
 8003794:	1d1a      	adds	r2, r3, #4
 8003796:	6032      	str	r2, [r6, #0]
 8003798:	681e      	ldr	r6, [r3, #0]
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	4630      	mov	r0, r6
 800379e:	f000 f913 	bl	80039c8 <memchr>
 80037a2:	b108      	cbz	r0, 80037a8 <_printf_i+0x1e8>
 80037a4:	1b80      	subs	r0, r0, r6
 80037a6:	6060      	str	r0, [r4, #4]
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	2300      	movs	r3, #0
 80037ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037b2:	e7aa      	b.n	800370a <_printf_i+0x14a>
 80037b4:	4632      	mov	r2, r6
 80037b6:	4649      	mov	r1, r9
 80037b8:	4640      	mov	r0, r8
 80037ba:	6923      	ldr	r3, [r4, #16]
 80037bc:	47d0      	blx	sl
 80037be:	3001      	adds	r0, #1
 80037c0:	d0ad      	beq.n	800371e <_printf_i+0x15e>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	079b      	lsls	r3, r3, #30
 80037c6:	d413      	bmi.n	80037f0 <_printf_i+0x230>
 80037c8:	68e0      	ldr	r0, [r4, #12]
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	4298      	cmp	r0, r3
 80037ce:	bfb8      	it	lt
 80037d0:	4618      	movlt	r0, r3
 80037d2:	e7a6      	b.n	8003722 <_printf_i+0x162>
 80037d4:	2301      	movs	r3, #1
 80037d6:	4632      	mov	r2, r6
 80037d8:	4649      	mov	r1, r9
 80037da:	4640      	mov	r0, r8
 80037dc:	47d0      	blx	sl
 80037de:	3001      	adds	r0, #1
 80037e0:	d09d      	beq.n	800371e <_printf_i+0x15e>
 80037e2:	3501      	adds	r5, #1
 80037e4:	68e3      	ldr	r3, [r4, #12]
 80037e6:	9903      	ldr	r1, [sp, #12]
 80037e8:	1a5b      	subs	r3, r3, r1
 80037ea:	42ab      	cmp	r3, r5
 80037ec:	dcf2      	bgt.n	80037d4 <_printf_i+0x214>
 80037ee:	e7eb      	b.n	80037c8 <_printf_i+0x208>
 80037f0:	2500      	movs	r5, #0
 80037f2:	f104 0619 	add.w	r6, r4, #25
 80037f6:	e7f5      	b.n	80037e4 <_printf_i+0x224>
 80037f8:	08004789 	.word	0x08004789
 80037fc:	0800479a 	.word	0x0800479a

08003800 <__sflush_r>:
 8003800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	0716      	lsls	r6, r2, #28
 8003808:	4605      	mov	r5, r0
 800380a:	460c      	mov	r4, r1
 800380c:	d454      	bmi.n	80038b8 <__sflush_r+0xb8>
 800380e:	684b      	ldr	r3, [r1, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	dc02      	bgt.n	800381a <__sflush_r+0x1a>
 8003814:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	dd48      	ble.n	80038ac <__sflush_r+0xac>
 800381a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800381c:	2e00      	cmp	r6, #0
 800381e:	d045      	beq.n	80038ac <__sflush_r+0xac>
 8003820:	2300      	movs	r3, #0
 8003822:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003826:	682f      	ldr	r7, [r5, #0]
 8003828:	6a21      	ldr	r1, [r4, #32]
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	d030      	beq.n	8003890 <__sflush_r+0x90>
 800382e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	0759      	lsls	r1, r3, #29
 8003834:	d505      	bpl.n	8003842 <__sflush_r+0x42>
 8003836:	6863      	ldr	r3, [r4, #4]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800383c:	b10b      	cbz	r3, 8003842 <__sflush_r+0x42>
 800383e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003840:	1ad2      	subs	r2, r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	4628      	mov	r0, r5
 8003846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003848:	6a21      	ldr	r1, [r4, #32]
 800384a:	47b0      	blx	r6
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	d106      	bne.n	8003860 <__sflush_r+0x60>
 8003852:	6829      	ldr	r1, [r5, #0]
 8003854:	291d      	cmp	r1, #29
 8003856:	d82b      	bhi.n	80038b0 <__sflush_r+0xb0>
 8003858:	4a28      	ldr	r2, [pc, #160]	@ (80038fc <__sflush_r+0xfc>)
 800385a:	410a      	asrs	r2, r1
 800385c:	07d6      	lsls	r6, r2, #31
 800385e:	d427      	bmi.n	80038b0 <__sflush_r+0xb0>
 8003860:	2200      	movs	r2, #0
 8003862:	6062      	str	r2, [r4, #4]
 8003864:	6922      	ldr	r2, [r4, #16]
 8003866:	04d9      	lsls	r1, r3, #19
 8003868:	6022      	str	r2, [r4, #0]
 800386a:	d504      	bpl.n	8003876 <__sflush_r+0x76>
 800386c:	1c42      	adds	r2, r0, #1
 800386e:	d101      	bne.n	8003874 <__sflush_r+0x74>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b903      	cbnz	r3, 8003876 <__sflush_r+0x76>
 8003874:	6560      	str	r0, [r4, #84]	@ 0x54
 8003876:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003878:	602f      	str	r7, [r5, #0]
 800387a:	b1b9      	cbz	r1, 80038ac <__sflush_r+0xac>
 800387c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003880:	4299      	cmp	r1, r3
 8003882:	d002      	beq.n	800388a <__sflush_r+0x8a>
 8003884:	4628      	mov	r0, r5
 8003886:	f7ff fbd3 	bl	8003030 <_free_r>
 800388a:	2300      	movs	r3, #0
 800388c:	6363      	str	r3, [r4, #52]	@ 0x34
 800388e:	e00d      	b.n	80038ac <__sflush_r+0xac>
 8003890:	2301      	movs	r3, #1
 8003892:	4628      	mov	r0, r5
 8003894:	47b0      	blx	r6
 8003896:	4602      	mov	r2, r0
 8003898:	1c50      	adds	r0, r2, #1
 800389a:	d1c9      	bne.n	8003830 <__sflush_r+0x30>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0c6      	beq.n	8003830 <__sflush_r+0x30>
 80038a2:	2b1d      	cmp	r3, #29
 80038a4:	d001      	beq.n	80038aa <__sflush_r+0xaa>
 80038a6:	2b16      	cmp	r3, #22
 80038a8:	d11d      	bne.n	80038e6 <__sflush_r+0xe6>
 80038aa:	602f      	str	r7, [r5, #0]
 80038ac:	2000      	movs	r0, #0
 80038ae:	e021      	b.n	80038f4 <__sflush_r+0xf4>
 80038b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	e01a      	b.n	80038ee <__sflush_r+0xee>
 80038b8:	690f      	ldr	r7, [r1, #16]
 80038ba:	2f00      	cmp	r7, #0
 80038bc:	d0f6      	beq.n	80038ac <__sflush_r+0xac>
 80038be:	0793      	lsls	r3, r2, #30
 80038c0:	bf18      	it	ne
 80038c2:	2300      	movne	r3, #0
 80038c4:	680e      	ldr	r6, [r1, #0]
 80038c6:	bf08      	it	eq
 80038c8:	694b      	ldreq	r3, [r1, #20]
 80038ca:	1bf6      	subs	r6, r6, r7
 80038cc:	600f      	str	r7, [r1, #0]
 80038ce:	608b      	str	r3, [r1, #8]
 80038d0:	2e00      	cmp	r6, #0
 80038d2:	ddeb      	ble.n	80038ac <__sflush_r+0xac>
 80038d4:	4633      	mov	r3, r6
 80038d6:	463a      	mov	r2, r7
 80038d8:	4628      	mov	r0, r5
 80038da:	6a21      	ldr	r1, [r4, #32]
 80038dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80038e0:	47e0      	blx	ip
 80038e2:	2800      	cmp	r0, #0
 80038e4:	dc07      	bgt.n	80038f6 <__sflush_r+0xf6>
 80038e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f6:	4407      	add	r7, r0
 80038f8:	1a36      	subs	r6, r6, r0
 80038fa:	e7e9      	b.n	80038d0 <__sflush_r+0xd0>
 80038fc:	dfbffffe 	.word	0xdfbffffe

08003900 <_fflush_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	4605      	mov	r5, r0
 8003906:	460c      	mov	r4, r1
 8003908:	b913      	cbnz	r3, 8003910 <_fflush_r+0x10>
 800390a:	2500      	movs	r5, #0
 800390c:	4628      	mov	r0, r5
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	b118      	cbz	r0, 800391a <_fflush_r+0x1a>
 8003912:	6a03      	ldr	r3, [r0, #32]
 8003914:	b90b      	cbnz	r3, 800391a <_fflush_r+0x1a>
 8003916:	f7ff f9b5 	bl	8002c84 <__sinit>
 800391a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f3      	beq.n	800390a <_fflush_r+0xa>
 8003922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003924:	07d0      	lsls	r0, r2, #31
 8003926:	d404      	bmi.n	8003932 <_fflush_r+0x32>
 8003928:	0599      	lsls	r1, r3, #22
 800392a:	d402      	bmi.n	8003932 <_fflush_r+0x32>
 800392c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800392e:	f7ff fb48 	bl	8002fc2 <__retarget_lock_acquire_recursive>
 8003932:	4628      	mov	r0, r5
 8003934:	4621      	mov	r1, r4
 8003936:	f7ff ff63 	bl	8003800 <__sflush_r>
 800393a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800393c:	4605      	mov	r5, r0
 800393e:	07da      	lsls	r2, r3, #31
 8003940:	d4e4      	bmi.n	800390c <_fflush_r+0xc>
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	059b      	lsls	r3, r3, #22
 8003946:	d4e1      	bmi.n	800390c <_fflush_r+0xc>
 8003948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800394a:	f7ff fb3b 	bl	8002fc4 <__retarget_lock_release_recursive>
 800394e:	e7dd      	b.n	800390c <_fflush_r+0xc>

08003950 <fiprintf>:
 8003950:	b40e      	push	{r1, r2, r3}
 8003952:	b503      	push	{r0, r1, lr}
 8003954:	4601      	mov	r1, r0
 8003956:	ab03      	add	r3, sp, #12
 8003958:	4805      	ldr	r0, [pc, #20]	@ (8003970 <fiprintf+0x20>)
 800395a:	f853 2b04 	ldr.w	r2, [r3], #4
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	f000 f89b 	bl	8003a9c <_vfiprintf_r>
 8003966:	b002      	add	sp, #8
 8003968:	f85d eb04 	ldr.w	lr, [sp], #4
 800396c:	b003      	add	sp, #12
 800396e:	4770      	bx	lr
 8003970:	200000a0 	.word	0x200000a0

08003974 <memmove>:
 8003974:	4288      	cmp	r0, r1
 8003976:	b510      	push	{r4, lr}
 8003978:	eb01 0402 	add.w	r4, r1, r2
 800397c:	d902      	bls.n	8003984 <memmove+0x10>
 800397e:	4284      	cmp	r4, r0
 8003980:	4623      	mov	r3, r4
 8003982:	d807      	bhi.n	8003994 <memmove+0x20>
 8003984:	1e43      	subs	r3, r0, #1
 8003986:	42a1      	cmp	r1, r4
 8003988:	d008      	beq.n	800399c <memmove+0x28>
 800398a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800398e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003992:	e7f8      	b.n	8003986 <memmove+0x12>
 8003994:	4601      	mov	r1, r0
 8003996:	4402      	add	r2, r0
 8003998:	428a      	cmp	r2, r1
 800399a:	d100      	bne.n	800399e <memmove+0x2a>
 800399c:	bd10      	pop	{r4, pc}
 800399e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039a6:	e7f7      	b.n	8003998 <memmove+0x24>

080039a8 <_sbrk_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	2300      	movs	r3, #0
 80039ac:	4d05      	ldr	r5, [pc, #20]	@ (80039c4 <_sbrk_r+0x1c>)
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	f7fd fc88 	bl	80012c8 <_sbrk>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_sbrk_r+0x1a>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_sbrk_r+0x1a>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	20000414 	.word	0x20000414

080039c8 <memchr>:
 80039c8:	4603      	mov	r3, r0
 80039ca:	b510      	push	{r4, lr}
 80039cc:	b2c9      	uxtb	r1, r1
 80039ce:	4402      	add	r2, r0
 80039d0:	4293      	cmp	r3, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	d101      	bne.n	80039da <memchr+0x12>
 80039d6:	2000      	movs	r0, #0
 80039d8:	e003      	b.n	80039e2 <memchr+0x1a>
 80039da:	7804      	ldrb	r4, [r0, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	428c      	cmp	r4, r1
 80039e0:	d1f6      	bne.n	80039d0 <memchr+0x8>
 80039e2:	bd10      	pop	{r4, pc}

080039e4 <abort>:
 80039e4:	2006      	movs	r0, #6
 80039e6:	b508      	push	{r3, lr}
 80039e8:	f000 fa2c 	bl	8003e44 <raise>
 80039ec:	2001      	movs	r0, #1
 80039ee:	f7fd fbf6 	bl	80011de <_exit>

080039f2 <_realloc_r>:
 80039f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	4680      	mov	r8, r0
 80039f8:	4615      	mov	r5, r2
 80039fa:	460c      	mov	r4, r1
 80039fc:	b921      	cbnz	r1, 8003a08 <_realloc_r+0x16>
 80039fe:	4611      	mov	r1, r2
 8003a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a04:	f7ff bb86 	b.w	8003114 <_malloc_r>
 8003a08:	b92a      	cbnz	r2, 8003a16 <_realloc_r+0x24>
 8003a0a:	f7ff fb11 	bl	8003030 <_free_r>
 8003a0e:	2400      	movs	r4, #0
 8003a10:	4620      	mov	r0, r4
 8003a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a16:	f000 fa31 	bl	8003e7c <_malloc_usable_size_r>
 8003a1a:	4285      	cmp	r5, r0
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	d802      	bhi.n	8003a26 <_realloc_r+0x34>
 8003a20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a24:	d8f4      	bhi.n	8003a10 <_realloc_r+0x1e>
 8003a26:	4629      	mov	r1, r5
 8003a28:	4640      	mov	r0, r8
 8003a2a:	f7ff fb73 	bl	8003114 <_malloc_r>
 8003a2e:	4607      	mov	r7, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d0ec      	beq.n	8003a0e <_realloc_r+0x1c>
 8003a34:	42b5      	cmp	r5, r6
 8003a36:	462a      	mov	r2, r5
 8003a38:	4621      	mov	r1, r4
 8003a3a:	bf28      	it	cs
 8003a3c:	4632      	movcs	r2, r6
 8003a3e:	f7ff faca 	bl	8002fd6 <memcpy>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4640      	mov	r0, r8
 8003a46:	f7ff faf3 	bl	8003030 <_free_r>
 8003a4a:	463c      	mov	r4, r7
 8003a4c:	e7e0      	b.n	8003a10 <_realloc_r+0x1e>

08003a4e <__sfputc_r>:
 8003a4e:	6893      	ldr	r3, [r2, #8]
 8003a50:	b410      	push	{r4}
 8003a52:	3b01      	subs	r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	6093      	str	r3, [r2, #8]
 8003a58:	da07      	bge.n	8003a6a <__sfputc_r+0x1c>
 8003a5a:	6994      	ldr	r4, [r2, #24]
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	db01      	blt.n	8003a64 <__sfputc_r+0x16>
 8003a60:	290a      	cmp	r1, #10
 8003a62:	d102      	bne.n	8003a6a <__sfputc_r+0x1c>
 8003a64:	bc10      	pop	{r4}
 8003a66:	f000 b931 	b.w	8003ccc <__swbuf_r>
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	1c58      	adds	r0, r3, #1
 8003a6e:	6010      	str	r0, [r2, #0]
 8003a70:	7019      	strb	r1, [r3, #0]
 8003a72:	4608      	mov	r0, r1
 8003a74:	bc10      	pop	{r4}
 8003a76:	4770      	bx	lr

08003a78 <__sfputs_r>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	460f      	mov	r7, r1
 8003a7e:	4614      	mov	r4, r2
 8003a80:	18d5      	adds	r5, r2, r3
 8003a82:	42ac      	cmp	r4, r5
 8003a84:	d101      	bne.n	8003a8a <__sfputs_r+0x12>
 8003a86:	2000      	movs	r0, #0
 8003a88:	e007      	b.n	8003a9a <__sfputs_r+0x22>
 8003a8a:	463a      	mov	r2, r7
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a92:	f7ff ffdc 	bl	8003a4e <__sfputc_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d1f3      	bne.n	8003a82 <__sfputs_r+0xa>
 8003a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a9c <_vfiprintf_r>:
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	4698      	mov	r8, r3
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	b09d      	sub	sp, #116	@ 0x74
 8003aaa:	b118      	cbz	r0, 8003ab4 <_vfiprintf_r+0x18>
 8003aac:	6a03      	ldr	r3, [r0, #32]
 8003aae:	b90b      	cbnz	r3, 8003ab4 <_vfiprintf_r+0x18>
 8003ab0:	f7ff f8e8 	bl	8002c84 <__sinit>
 8003ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ab6:	07d9      	lsls	r1, r3, #31
 8003ab8:	d405      	bmi.n	8003ac6 <_vfiprintf_r+0x2a>
 8003aba:	89ab      	ldrh	r3, [r5, #12]
 8003abc:	059a      	lsls	r2, r3, #22
 8003abe:	d402      	bmi.n	8003ac6 <_vfiprintf_r+0x2a>
 8003ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ac2:	f7ff fa7e 	bl	8002fc2 <__retarget_lock_acquire_recursive>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	d501      	bpl.n	8003ad0 <_vfiprintf_r+0x34>
 8003acc:	692b      	ldr	r3, [r5, #16]
 8003ace:	b99b      	cbnz	r3, 8003af8 <_vfiprintf_r+0x5c>
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f000 f938 	bl	8003d48 <__swsetup_r>
 8003ad8:	b170      	cbz	r0, 8003af8 <_vfiprintf_r+0x5c>
 8003ada:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003adc:	07dc      	lsls	r4, r3, #31
 8003ade:	d504      	bpl.n	8003aea <_vfiprintf_r+0x4e>
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	b01d      	add	sp, #116	@ 0x74
 8003ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aea:	89ab      	ldrh	r3, [r5, #12]
 8003aec:	0598      	lsls	r0, r3, #22
 8003aee:	d4f7      	bmi.n	8003ae0 <_vfiprintf_r+0x44>
 8003af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003af2:	f7ff fa67 	bl	8002fc4 <__retarget_lock_release_recursive>
 8003af6:	e7f3      	b.n	8003ae0 <_vfiprintf_r+0x44>
 8003af8:	2300      	movs	r3, #0
 8003afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003afc:	2320      	movs	r3, #32
 8003afe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b02:	2330      	movs	r3, #48	@ 0x30
 8003b04:	f04f 0901 	mov.w	r9, #1
 8003b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b0c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003cb8 <_vfiprintf_r+0x21c>
 8003b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b14:	4623      	mov	r3, r4
 8003b16:	469a      	mov	sl, r3
 8003b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b1c:	b10a      	cbz	r2, 8003b22 <_vfiprintf_r+0x86>
 8003b1e:	2a25      	cmp	r2, #37	@ 0x25
 8003b20:	d1f9      	bne.n	8003b16 <_vfiprintf_r+0x7a>
 8003b22:	ebba 0b04 	subs.w	fp, sl, r4
 8003b26:	d00b      	beq.n	8003b40 <_vfiprintf_r+0xa4>
 8003b28:	465b      	mov	r3, fp
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f7ff ffa2 	bl	8003a78 <__sfputs_r>
 8003b34:	3001      	adds	r0, #1
 8003b36:	f000 80a7 	beq.w	8003c88 <_vfiprintf_r+0x1ec>
 8003b3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b3c:	445a      	add	r2, fp
 8003b3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b40:	f89a 3000 	ldrb.w	r3, [sl]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 809f 	beq.w	8003c88 <_vfiprintf_r+0x1ec>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b54:	f10a 0a01 	add.w	sl, sl, #1
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	9307      	str	r3, [sp, #28]
 8003b5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b60:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b62:	4654      	mov	r4, sl
 8003b64:	2205      	movs	r2, #5
 8003b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6a:	4853      	ldr	r0, [pc, #332]	@ (8003cb8 <_vfiprintf_r+0x21c>)
 8003b6c:	f7ff ff2c 	bl	80039c8 <memchr>
 8003b70:	9a04      	ldr	r2, [sp, #16]
 8003b72:	b9d8      	cbnz	r0, 8003bac <_vfiprintf_r+0x110>
 8003b74:	06d1      	lsls	r1, r2, #27
 8003b76:	bf44      	itt	mi
 8003b78:	2320      	movmi	r3, #32
 8003b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b7e:	0713      	lsls	r3, r2, #28
 8003b80:	bf44      	itt	mi
 8003b82:	232b      	movmi	r3, #43	@ 0x2b
 8003b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b88:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b8e:	d015      	beq.n	8003bbc <_vfiprintf_r+0x120>
 8003b90:	4654      	mov	r4, sl
 8003b92:	2000      	movs	r0, #0
 8003b94:	f04f 0c0a 	mov.w	ip, #10
 8003b98:	9a07      	ldr	r2, [sp, #28]
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba0:	3b30      	subs	r3, #48	@ 0x30
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	d94b      	bls.n	8003c3e <_vfiprintf_r+0x1a2>
 8003ba6:	b1b0      	cbz	r0, 8003bd6 <_vfiprintf_r+0x13a>
 8003ba8:	9207      	str	r2, [sp, #28]
 8003baa:	e014      	b.n	8003bd6 <_vfiprintf_r+0x13a>
 8003bac:	eba0 0308 	sub.w	r3, r0, r8
 8003bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	46a2      	mov	sl, r4
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	e7d2      	b.n	8003b62 <_vfiprintf_r+0xc6>
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	9103      	str	r1, [sp, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bfbb      	ittet	lt
 8003bc8:	425b      	neglt	r3, r3
 8003bca:	f042 0202 	orrlt.w	r2, r2, #2
 8003bce:	9307      	strge	r3, [sp, #28]
 8003bd0:	9307      	strlt	r3, [sp, #28]
 8003bd2:	bfb8      	it	lt
 8003bd4:	9204      	strlt	r2, [sp, #16]
 8003bd6:	7823      	ldrb	r3, [r4, #0]
 8003bd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bda:	d10a      	bne.n	8003bf2 <_vfiprintf_r+0x156>
 8003bdc:	7863      	ldrb	r3, [r4, #1]
 8003bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8003be0:	d132      	bne.n	8003c48 <_vfiprintf_r+0x1ac>
 8003be2:	9b03      	ldr	r3, [sp, #12]
 8003be4:	3402      	adds	r4, #2
 8003be6:	1d1a      	adds	r2, r3, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	9203      	str	r2, [sp, #12]
 8003bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bf0:	9305      	str	r3, [sp, #20]
 8003bf2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003cbc <_vfiprintf_r+0x220>
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4650      	mov	r0, sl
 8003bfa:	7821      	ldrb	r1, [r4, #0]
 8003bfc:	f7ff fee4 	bl	80039c8 <memchr>
 8003c00:	b138      	cbz	r0, 8003c12 <_vfiprintf_r+0x176>
 8003c02:	2240      	movs	r2, #64	@ 0x40
 8003c04:	9b04      	ldr	r3, [sp, #16]
 8003c06:	eba0 000a 	sub.w	r0, r0, sl
 8003c0a:	4082      	lsls	r2, r0
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	3401      	adds	r4, #1
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c16:	2206      	movs	r2, #6
 8003c18:	4829      	ldr	r0, [pc, #164]	@ (8003cc0 <_vfiprintf_r+0x224>)
 8003c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c1e:	f7ff fed3 	bl	80039c8 <memchr>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d03f      	beq.n	8003ca6 <_vfiprintf_r+0x20a>
 8003c26:	4b27      	ldr	r3, [pc, #156]	@ (8003cc4 <_vfiprintf_r+0x228>)
 8003c28:	bb1b      	cbnz	r3, 8003c72 <_vfiprintf_r+0x1d6>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	3307      	adds	r3, #7
 8003c2e:	f023 0307 	bic.w	r3, r3, #7
 8003c32:	3308      	adds	r3, #8
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c38:	443b      	add	r3, r7
 8003c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c3c:	e76a      	b.n	8003b14 <_vfiprintf_r+0x78>
 8003c3e:	460c      	mov	r4, r1
 8003c40:	2001      	movs	r0, #1
 8003c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c46:	e7a8      	b.n	8003b9a <_vfiprintf_r+0xfe>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f04f 0c0a 	mov.w	ip, #10
 8003c4e:	4619      	mov	r1, r3
 8003c50:	3401      	adds	r4, #1
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	4620      	mov	r0, r4
 8003c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c5a:	3a30      	subs	r2, #48	@ 0x30
 8003c5c:	2a09      	cmp	r2, #9
 8003c5e:	d903      	bls.n	8003c68 <_vfiprintf_r+0x1cc>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0c6      	beq.n	8003bf2 <_vfiprintf_r+0x156>
 8003c64:	9105      	str	r1, [sp, #20]
 8003c66:	e7c4      	b.n	8003bf2 <_vfiprintf_r+0x156>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c70:	e7f0      	b.n	8003c54 <_vfiprintf_r+0x1b8>
 8003c72:	ab03      	add	r3, sp, #12
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	462a      	mov	r2, r5
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <_vfiprintf_r+0x22c>)
 8003c7c:	a904      	add	r1, sp, #16
 8003c7e:	f3af 8000 	nop.w
 8003c82:	4607      	mov	r7, r0
 8003c84:	1c78      	adds	r0, r7, #1
 8003c86:	d1d6      	bne.n	8003c36 <_vfiprintf_r+0x19a>
 8003c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c8a:	07d9      	lsls	r1, r3, #31
 8003c8c:	d405      	bmi.n	8003c9a <_vfiprintf_r+0x1fe>
 8003c8e:	89ab      	ldrh	r3, [r5, #12]
 8003c90:	059a      	lsls	r2, r3, #22
 8003c92:	d402      	bmi.n	8003c9a <_vfiprintf_r+0x1fe>
 8003c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c96:	f7ff f995 	bl	8002fc4 <__retarget_lock_release_recursive>
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	065b      	lsls	r3, r3, #25
 8003c9e:	f53f af1f 	bmi.w	8003ae0 <_vfiprintf_r+0x44>
 8003ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ca4:	e71e      	b.n	8003ae4 <_vfiprintf_r+0x48>
 8003ca6:	ab03      	add	r3, sp, #12
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	462a      	mov	r2, r5
 8003cac:	4630      	mov	r0, r6
 8003cae:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <_vfiprintf_r+0x22c>)
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	f7ff fc85 	bl	80035c0 <_printf_i>
 8003cb6:	e7e4      	b.n	8003c82 <_vfiprintf_r+0x1e6>
 8003cb8:	08004778 	.word	0x08004778
 8003cbc:	0800477e 	.word	0x0800477e
 8003cc0:	08004782 	.word	0x08004782
 8003cc4:	00000000 	.word	0x00000000
 8003cc8:	08003a79 	.word	0x08003a79

08003ccc <__swbuf_r>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	460e      	mov	r6, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	b118      	cbz	r0, 8003cde <__swbuf_r+0x12>
 8003cd6:	6a03      	ldr	r3, [r0, #32]
 8003cd8:	b90b      	cbnz	r3, 8003cde <__swbuf_r+0x12>
 8003cda:	f7fe ffd3 	bl	8002c84 <__sinit>
 8003cde:	69a3      	ldr	r3, [r4, #24]
 8003ce0:	60a3      	str	r3, [r4, #8]
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	071a      	lsls	r2, r3, #28
 8003ce6:	d501      	bpl.n	8003cec <__swbuf_r+0x20>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	b943      	cbnz	r3, 8003cfe <__swbuf_r+0x32>
 8003cec:	4621      	mov	r1, r4
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 f82a 	bl	8003d48 <__swsetup_r>
 8003cf4:	b118      	cbz	r0, 8003cfe <__swbuf_r+0x32>
 8003cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	6922      	ldr	r2, [r4, #16]
 8003d02:	b2f6      	uxtb	r6, r6
 8003d04:	1a98      	subs	r0, r3, r2
 8003d06:	6963      	ldr	r3, [r4, #20]
 8003d08:	4637      	mov	r7, r6
 8003d0a:	4283      	cmp	r3, r0
 8003d0c:	dc05      	bgt.n	8003d1a <__swbuf_r+0x4e>
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f7ff fdf5 	bl	8003900 <_fflush_r>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d1ed      	bne.n	8003cf6 <__swbuf_r+0x2a>
 8003d1a:	68a3      	ldr	r3, [r4, #8]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	60a3      	str	r3, [r4, #8]
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	6022      	str	r2, [r4, #0]
 8003d26:	701e      	strb	r6, [r3, #0]
 8003d28:	6962      	ldr	r2, [r4, #20]
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d004      	beq.n	8003d3a <__swbuf_r+0x6e>
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	07db      	lsls	r3, r3, #31
 8003d34:	d5e1      	bpl.n	8003cfa <__swbuf_r+0x2e>
 8003d36:	2e0a      	cmp	r6, #10
 8003d38:	d1df      	bne.n	8003cfa <__swbuf_r+0x2e>
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f7ff fddf 	bl	8003900 <_fflush_r>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d0d9      	beq.n	8003cfa <__swbuf_r+0x2e>
 8003d46:	e7d6      	b.n	8003cf6 <__swbuf_r+0x2a>

08003d48 <__swsetup_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4b29      	ldr	r3, [pc, #164]	@ (8003df0 <__swsetup_r+0xa8>)
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	460c      	mov	r4, r1
 8003d52:	b118      	cbz	r0, 8003d5c <__swsetup_r+0x14>
 8003d54:	6a03      	ldr	r3, [r0, #32]
 8003d56:	b90b      	cbnz	r3, 8003d5c <__swsetup_r+0x14>
 8003d58:	f7fe ff94 	bl	8002c84 <__sinit>
 8003d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d60:	0719      	lsls	r1, r3, #28
 8003d62:	d422      	bmi.n	8003daa <__swsetup_r+0x62>
 8003d64:	06da      	lsls	r2, r3, #27
 8003d66:	d407      	bmi.n	8003d78 <__swsetup_r+0x30>
 8003d68:	2209      	movs	r2, #9
 8003d6a:	602a      	str	r2, [r5, #0]
 8003d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	e033      	b.n	8003de0 <__swsetup_r+0x98>
 8003d78:	0758      	lsls	r0, r3, #29
 8003d7a:	d512      	bpl.n	8003da2 <__swsetup_r+0x5a>
 8003d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d7e:	b141      	cbz	r1, 8003d92 <__swsetup_r+0x4a>
 8003d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d84:	4299      	cmp	r1, r3
 8003d86:	d002      	beq.n	8003d8e <__swsetup_r+0x46>
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f7ff f951 	bl	8003030 <_free_r>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	b94b      	cbnz	r3, 8003dc2 <__swsetup_r+0x7a>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db8:	d003      	beq.n	8003dc2 <__swsetup_r+0x7a>
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f88a 	bl	8003ed6 <__smakebuf_r>
 8003dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dc6:	f013 0201 	ands.w	r2, r3, #1
 8003dca:	d00a      	beq.n	8003de2 <__swsetup_r+0x9a>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	60a2      	str	r2, [r4, #8]
 8003dd0:	6962      	ldr	r2, [r4, #20]
 8003dd2:	4252      	negs	r2, r2
 8003dd4:	61a2      	str	r2, [r4, #24]
 8003dd6:	6922      	ldr	r2, [r4, #16]
 8003dd8:	b942      	cbnz	r2, 8003dec <__swsetup_r+0xa4>
 8003dda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dde:	d1c5      	bne.n	8003d6c <__swsetup_r+0x24>
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
 8003de2:	0799      	lsls	r1, r3, #30
 8003de4:	bf58      	it	pl
 8003de6:	6962      	ldrpl	r2, [r4, #20]
 8003de8:	60a2      	str	r2, [r4, #8]
 8003dea:	e7f4      	b.n	8003dd6 <__swsetup_r+0x8e>
 8003dec:	2000      	movs	r0, #0
 8003dee:	e7f7      	b.n	8003de0 <__swsetup_r+0x98>
 8003df0:	200000a0 	.word	0x200000a0

08003df4 <_raise_r>:
 8003df4:	291f      	cmp	r1, #31
 8003df6:	b538      	push	{r3, r4, r5, lr}
 8003df8:	4605      	mov	r5, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	d904      	bls.n	8003e08 <_raise_r+0x14>
 8003dfe:	2316      	movs	r3, #22
 8003e00:	6003      	str	r3, [r0, #0]
 8003e02:	f04f 30ff 	mov.w	r0, #4294967295
 8003e06:	bd38      	pop	{r3, r4, r5, pc}
 8003e08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003e0a:	b112      	cbz	r2, 8003e12 <_raise_r+0x1e>
 8003e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e10:	b94b      	cbnz	r3, 8003e26 <_raise_r+0x32>
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 f830 	bl	8003e78 <_getpid_r>
 8003e18:	4622      	mov	r2, r4
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e22:	f000 b817 	b.w	8003e54 <_kill_r>
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d00a      	beq.n	8003e40 <_raise_r+0x4c>
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	d103      	bne.n	8003e36 <_raise_r+0x42>
 8003e2e:	2316      	movs	r3, #22
 8003e30:	6003      	str	r3, [r0, #0]
 8003e32:	2001      	movs	r0, #1
 8003e34:	e7e7      	b.n	8003e06 <_raise_r+0x12>
 8003e36:	2100      	movs	r1, #0
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003e3e:	4798      	blx	r3
 8003e40:	2000      	movs	r0, #0
 8003e42:	e7e0      	b.n	8003e06 <_raise_r+0x12>

08003e44 <raise>:
 8003e44:	4b02      	ldr	r3, [pc, #8]	@ (8003e50 <raise+0xc>)
 8003e46:	4601      	mov	r1, r0
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	f7ff bfd3 	b.w	8003df4 <_raise_r>
 8003e4e:	bf00      	nop
 8003e50:	200000a0 	.word	0x200000a0

08003e54 <_kill_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	2300      	movs	r3, #0
 8003e58:	4d06      	ldr	r5, [pc, #24]	@ (8003e74 <_kill_r+0x20>)
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	4611      	mov	r1, r2
 8003e60:	602b      	str	r3, [r5, #0]
 8003e62:	f7fd f9ac 	bl	80011be <_kill>
 8003e66:	1c43      	adds	r3, r0, #1
 8003e68:	d102      	bne.n	8003e70 <_kill_r+0x1c>
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	b103      	cbz	r3, 8003e70 <_kill_r+0x1c>
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
 8003e72:	bf00      	nop
 8003e74:	20000414 	.word	0x20000414

08003e78 <_getpid_r>:
 8003e78:	f7fd b99a 	b.w	80011b0 <_getpid>

08003e7c <_malloc_usable_size_r>:
 8003e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e80:	1f18      	subs	r0, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bfbc      	itt	lt
 8003e86:	580b      	ldrlt	r3, [r1, r0]
 8003e88:	18c0      	addlt	r0, r0, r3
 8003e8a:	4770      	bx	lr

08003e8c <__swhatbuf_r>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e94:	4615      	mov	r5, r2
 8003e96:	2900      	cmp	r1, #0
 8003e98:	461e      	mov	r6, r3
 8003e9a:	b096      	sub	sp, #88	@ 0x58
 8003e9c:	da0c      	bge.n	8003eb8 <__swhatbuf_r+0x2c>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ea6:	bf14      	ite	ne
 8003ea8:	2340      	movne	r3, #64	@ 0x40
 8003eaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003eae:	2000      	movs	r0, #0
 8003eb0:	6031      	str	r1, [r6, #0]
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	b016      	add	sp, #88	@ 0x58
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	466a      	mov	r2, sp
 8003eba:	f000 f849 	bl	8003f50 <_fstat_r>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	dbed      	blt.n	8003e9e <__swhatbuf_r+0x12>
 8003ec2:	9901      	ldr	r1, [sp, #4]
 8003ec4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ec8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ecc:	4259      	negs	r1, r3
 8003ece:	4159      	adcs	r1, r3
 8003ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ed4:	e7eb      	b.n	8003eae <__swhatbuf_r+0x22>

08003ed6 <__smakebuf_r>:
 8003ed6:	898b      	ldrh	r3, [r1, #12]
 8003ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eda:	079d      	lsls	r5, r3, #30
 8003edc:	4606      	mov	r6, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	d507      	bpl.n	8003ef2 <__smakebuf_r+0x1c>
 8003ee2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	6123      	str	r3, [r4, #16]
 8003eea:	2301      	movs	r3, #1
 8003eec:	6163      	str	r3, [r4, #20]
 8003eee:	b003      	add	sp, #12
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef2:	466a      	mov	r2, sp
 8003ef4:	ab01      	add	r3, sp, #4
 8003ef6:	f7ff ffc9 	bl	8003e8c <__swhatbuf_r>
 8003efa:	9f00      	ldr	r7, [sp, #0]
 8003efc:	4605      	mov	r5, r0
 8003efe:	4639      	mov	r1, r7
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff f907 	bl	8003114 <_malloc_r>
 8003f06:	b948      	cbnz	r0, 8003f1c <__smakebuf_r+0x46>
 8003f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0c:	059a      	lsls	r2, r3, #22
 8003f0e:	d4ee      	bmi.n	8003eee <__smakebuf_r+0x18>
 8003f10:	f023 0303 	bic.w	r3, r3, #3
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	e7e2      	b.n	8003ee2 <__smakebuf_r+0xc>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	9b01      	ldr	r3, [sp, #4]
 8003f2a:	6020      	str	r0, [r4, #0]
 8003f2c:	b15b      	cbz	r3, 8003f46 <__smakebuf_r+0x70>
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f34:	f000 f81e 	bl	8003f74 <_isatty_r>
 8003f38:	b128      	cbz	r0, 8003f46 <__smakebuf_r+0x70>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f023 0303 	bic.w	r3, r3, #3
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	431d      	orrs	r5, r3
 8003f4a:	81a5      	strh	r5, [r4, #12]
 8003f4c:	e7cf      	b.n	8003eee <__smakebuf_r+0x18>
	...

08003f50 <_fstat_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	2300      	movs	r3, #0
 8003f54:	4d06      	ldr	r5, [pc, #24]	@ (8003f70 <_fstat_r+0x20>)
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	f7fd f98d 	bl	800127c <_fstat>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	d102      	bne.n	8003f6c <_fstat_r+0x1c>
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	b103      	cbz	r3, 8003f6c <_fstat_r+0x1c>
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	bd38      	pop	{r3, r4, r5, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000414 	.word	0x20000414

08003f74 <_isatty_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	2300      	movs	r3, #0
 8003f78:	4d05      	ldr	r5, [pc, #20]	@ (8003f90 <_isatty_r+0x1c>)
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	602b      	str	r3, [r5, #0]
 8003f80:	f7fd f98b 	bl	800129a <_isatty>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	d102      	bne.n	8003f8e <_isatty_r+0x1a>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	b103      	cbz	r3, 8003f8e <_isatty_r+0x1a>
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	20000414 	.word	0x20000414

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
